#!/bin/sh

# This script is used by both our Vagrant and Jenkins -based build environments.

set -e

as_root_do() {
    sudo \
	${RSYNC_PROXY:+RSYNC_PROXY="$RSYNC_PROXY"} \
	${http_proxy:+http_proxy="$http_proxy"} \
	${https_proxy:+https_proxy="$https_proxy"} \
	${ftp_proxy:+ftp_proxy="$ftp_proxy"} \
	${no_proxy:+no_proxy="$no_proxy"} \
	${MKSQUASHFS_OPTIONS:+MKSQUASHFS_OPTIONS="$MKSQUASHFS_OPTIONS"} \
	"$@"
}

sync_sources() {
    COMMIT="$(git --git-dir=/amnesia.git rev-parse --verify HEAD)"
    if git --git-dir=/amnesia.git symbolic-ref HEAD >/dev/null 2>&1; then
        # We are building from a branch
        REV="${1:-$(git --git-dir=/amnesia.git name-rev --name-only HEAD)}"
    else
        # We are (hopefully) building from a tag
        if ! REV="${1:-$(git --git-dir=/amnesia.git describe --tags --exact-match ${COMMIT})}"; then
	    echo "It seems we are building from an untagged detached HEAD. Aborting." >&2
	    exit 1
        fi
    fi
    test -d "${GIT_SOURCES}" || git clone /amnesia.git "${GIT_SOURCES}"
    cd "${GIT_SOURCES}"
    git fetch --tags origin
    git checkout --force "${REV}"
    git reset --hard "${COMMIT}"
}

build_website() {
    cd "${GIT_SOURCES}"
    ./build-website
}

get_build_dir() {
    local build_dir
    build_dir="$(find /tmp -name 'tails-build-dir.*')"
    if [ -n "${build_dir}" ]; then
        # XXX: sanity checks
        # 1. there's only one dir
        # 2. it's mounted according to TAILS_RAM_BUILD
        :
    fi
    echo "${build_dir}"
}

prepare_build_dir() {
    local build_dir tmpfs_dir
    build_dir="$(get_build_dir)"
    if [ -z "${build_dir}" ]; then
        build_dir="$(mktemp -d /tmp/tails-build-dir.XXXXXXXX)"
        if [ "${TAILS_RAM_BUILD}" ]; then
            tmpfs_dir="$(mktemp -d /tmp/tails-build-tmpfs.XXXXXXXX)"
            as_root_do mount -t tmpfs -o "noatime,size=100%,mode=0770,uid=root,gid=${USER}" tmpfs "${tmpfs_dir}"
            as_root_do mount -t aufs -o "noatime,noxino,dirs=${tmpfs_dir}=rw:${GIT_SOURCES}/=rr+wh" aufs "${build_dir}"
        else
            as_root_do rsync -a "${GIT_SOURCES}"/ "${BUILD_DIR}"/
        fi
    fi
    get_build_dir
}

teardown_build_dir() {
    local build_dir tmpfs_dir
    build_dir="$(get_build_dir)"
    [ -z "${build_dir}" ] && return 0
    build_dir_src="$(findmnt --noheadings --output SOURCE --target "${build_dir}")"

    mounts=$(mount | grep -E "^[^[:space:]]+ on ${build_dir}" | \
		    awk '{print $3}' | sort -r)
    [ -n "${mounts}" ] && sudo umount ${mounts}

    if [ "${build_dir_src}" = aufs ]; then
        tmpfs_dir="$(find /tmp -name 'tails-build-dir.*')"
        sudo umount "${tmpfs_dir}"
        sudo rm -rf "${tmpfs_dir}"
        sudo umount "${build_dir}"
    fi
    sudo rm -rf "${build_dir}"
}

build_image() {
    cd "$(get_build_dir)"
    if [ "${TAILS_CLEAN_BUILD}" ]; then
	as_root_do lb clean --all
        git clean --force -d -x
    fi
    as_root_do lb config --cache false
    as_root_do lb build
}

GIT_SOURCES=/home/vagrant/amnesia

case "${1}" in
    build-website) build_website ;;
    sync-sources) sync_sources ;;
    prepare-build_dir) prepare_build_dir ;;
    teardown-build_dir) teardown_build_dir ;;
    build-image) build_image ;;
    *)
        echo "invalid action '${1}'" >&2
        exit 1
        ;;
esac
