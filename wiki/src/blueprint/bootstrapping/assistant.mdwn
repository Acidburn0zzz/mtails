[[!meta title="Web assistant for getting started with Tails"]]

[[!toc]]

The web assistant is a set of web pages that will merge our download and
install instructions into a single web tool. It will put emphasis on the
most frequent and recommended scenarios, and point to the rest of the
documentation for corner cases or more advanced usage.

<a id="phases"></a>

The assistant will be composed of three main phases:

  1. The "[[router|assistant#router]]" which is a set of introductory
     questions that lead the user to choose one of the possible
     installation processes.
  2. The "[[overview|assistant#overview]]" which presents the
     installation process to the user, what hardware is needed, how long
     it will take, what are the big steps, etc.
  3. The "steps" which are the detailed instructions for each big step.

<a id="1st_iteration"></a>

First iteration
===============

For the first iteration we did some parallel designs of a possible
wireframe for the web assistant:

  - [[wireframe by sajolida|1st_iteration/wireframe-sajolida-20150323.odg]]
  - [wireframe by tchou](https://labs.riseup.net/code/attachments/download/722/wireframe-tchou-20150323.pdf)

Conclusion
----------

We decided to split the assistant into [[three main phases|assistant#phases]].

<a id="router"></a>

Router
======

<a id="2nd_iteration"></a>

Second iteration
----------------

We refined the first iteration still with parallel designs:

  - [[presentation by sajolida|router/2nd_iteration/router-sajolida-20150325.odp]]
  - [[presentation by tchou|router/2nd_iteration/router-tchou-20150325.odp]]

And conducted some user testing on both designs:

  - [[spreadsheet of summarized outcomings|router/2nd_iteration/router-testing-20150325.ods]]

<a id="3rd_iteration"></a>

Third iteration
---------------

### Objectives

  - Rework the alternative between USB and DVD:
    - Merge slide 11 & 13 from [[router/2nd_iteration/router-sajolida-20150325.odp]].
    - Make USB more preeminent major, and DVD less
  - Guide better Mac users:
    - Build a list of Mac hardware and their possible scenarios.
    - Explain where to find Mac hardware version.
    - Present clone (1/3) as an alternative to installation from scratch (2/3).
  - Add a welcoming screen.
  - Mention virtual machines as a minor option on OS page or destination media page.
  - Consider improving navigation.



## For the router's Apple page : maintain a Tails compatibility list

Seeing that :

- a lot of current and potential users are Apple users
- Tails is running more or less on this devices
- There are a limite number of different models

We suggest to maintain a list with the state of the tails compatibility on this hardware. So in the web assistant router a potential user could know if Tails works on his computer and wich way (dvd/usb...) before he tries to install it (and maybe wich computer to buy).

### Data type
The data could be stored in a yaml file, in the git repo.

### Data content

Something like :

    model / part of the serial number
    tails version | working ? | boot on usb ? | boot on dvd ? | comments

* In we way to keep history off compatibilty (with olders Tails versions) in this file, maybe we will have to show to the user the last relevant informations. We have the "Tails version" to :

 - know globaly how evolves the support for Apple computers
 - aware the user or the support teams where compatibilty has broken

* "comment" are raw informations on wifi support, retina..
 
### Who maintain ?
- call to heavily test sometimes
- ask to people doing Tails trainings
- report to frontdesk
- mayby something editable by users

### In the router
In the Apple page of the router, we could implement it in two steps, or in two ways.

#### all information (without form)

- data is transformed server-side (with https://ikiwiki.info/plugins/contrib/ymlfront/ ?) in html in a table, with links to the working scenarios for each models.
- everything is one the html
- some information is displayed to know easily what kind of mac is working (simplifing https://fr.ifixit.com/Info/ID-your-Mac ?)
- the user can toggle to display content (a list by computer type : iMac, Macbook Air...)
- toggle is in JS, as a fallback : display all information (no toggle)

#### relevant information (with form)

- some information is displayed to know easily what kind of mac is working
- the user type in a form the serial number or click in a dedicades tiny wizard like https://fr.ifixit.com/Info/ID-your-Mac
- some server-side (ruby) or client-side(JS) get the revelant model and display the links. so the user see information for his computer
- if it's in JS, as a non-js fallback :
 - the "without form" version
 - or no fallback, just the default instructions




### Redmine
This tickets wants to fix the same problem : [[!tails_ticket 9150]]



<a id="overview"></a>

Overview
========

Second iteration
----------------

  - [[wireframe of the overview|overview/2nd_iteration/overview-20150324.odg]]

  - Drawings of the overview with 2 more steps (plug the keys) [one](https://labs.riseup.net/code/attachments/download/732/tchou-overview.jpg) / [two](https://labs.riseup.net/code/attachments/download/733/tchou-overview2.jpg)


Infography
----------

We brainstormed a bit more on the possible infography to explain the
installation steps graphically:

  - [drawings by sajolida](infography/2nd_iteration/infography-sajolida-20150327.svg)

<a id="url"></a>

URL scheme
==========

The assistant will be implemented as a (huge) set of ikiwiki pages. It
will have its own navigation tools (sidebar, back button, maybe
breadcrumbs, etc). Even if two pages are going to be very similar (for
example "Choose your media, for Windows" and "Choose your media, for
Debian", we need different pages and thus different URLs).

We will sometimes tell the user to write down the URL of one page or
open it on a smartphone (for example, before shutting down the
computer).

So they need to be short and meaningful (as an URL) both for the people
working on the code and the user.

Those URLs might also be given by internal tools, if we want to point
the user back to the assistant after start a media installed using UUI
for example.

Those URLs might be:

  - Written down on a sheet of paper.
  - Opened in a smartphone.
  - Clicked or copied from a tool inside Tails.
  - Given by frontdesk as an answer to a support request.
  - Listed on a sitemap (for frontdesk for example).

Proposed scheme. Those are just examples, not an exhaustive list:

  - router
    - `/install` (*Intro*)
    - `/install/os` (*Choose your OS*)
    - `/install/debian/media` (*Debian, choose your media*)
    - `/install/expert/media` (*Debian hacker, choose your media*)
    - `/install/linux/media` (*Linux, choose your media*)
    - `/install/mac/media` (*Mac, choose your media*)
    - `/install/win/media` (*Windows, choose your media*)
    - `/install/help` (*I need external help*)
  - overview
    - `/install/copy` (*Clone from a friend*)
    - `/install/debian/usb` (*Debian USB*)
    - `/install/debian/dvd` (*Debian DVD*)
    - `/install/expert/usb` (*Debian hacker USB*)
    - `/install/expert/dvd` (*Debian hacker DVD*)
    - `/install/linux/usb` (*Linux USB*)
    - `/install/linux/dvd` (*Linux DVD*)
    - `/install/mac/usb` (*Mac USB via USB*)
    - `/install/mac/dvd` (*Mac DVD*)
    - `/install/mac/dvd-usb` (*Mac USB via DVD*)
    - `/install/win/usb` (*Windows USB*)
    - `/install/win/dvd` (*Windows DVD*)
  - steps
    - `/install/debian/usb/1` (*Debian USB step 1*)
    - `/install/debian/usb/2` (*Debian USB step 2*)
    - `/install/debian/usb/3` (*Debian USB step 3*)
    - ...


Scenarios (or steps)
====================

Reminder on lexicon :

* temp Tails : a Tails but with no automatic upgrade and no possible persistance
* minimal Tails : a Tails with automatic upgrade, but no persistance
* full features Tails : a Tails with automatic upgrade and persistance

### Table of content :

**With USB as a destination media:**

* Windows to USB
* Mac tempDVD to USB
* Mac tempUSB to USB 
* Debian to USB
* Debian Hacker to USB 
* Linux to USB
* Clone from a friend

**With DVD as a destination media:**

* Windows to DVD
* Mac to DVD
* Linux / debian to DVD
* Debian Hacker to DVD

**Extra possible scenarios:**

* "out". Join contact or training
* virtual box




### With USB as a destination media

#### Windows to USB:

1. Download and verify 
2. Copy to temp Tails with UUI 
3. Reboot  with temp Tails
4. Install the minimal Tails 
5. Reboot the minimal Tails 
6. option : Install persistance 
7. option : Reboot with full feature Tails

#### Mac tempDVD to USB:
 
1. Download and verify 
2. Copy to temp Tails with Mac Burner
3. Reboot  with temp Tails 
4. Install the minimal Tails 
5. Reboot the minimal Tails 
6. option : Install persistance 
7. option : Reboot with full feature Tails 

#### Mac tempUSB to USB:

1. Download and verify 
2. Copy to temp Tails with cmd-line
3. Reboot  with temp Tails 
4. Install the minimal Tails 
5. Reboot the minimal Tails 
6. option : Install persistance 
7. option : Reboot with full feature Tails 

#### Debian to USB:

1. Download and verify 
2. Copy to minimal Tails with Tails Installer
3. option : Install persistance 
4. option : Reboot with full feature Tails

#### Debian Hacker to USB:

1. Download with wget
2. Verify with OpenPGP Debian-Keyringer
3. Install a minimal Tails with cmd-line Tails-Installer
4. Reboot with minimal Tails
5. option : Install persistance
6. option : Reboot  with full feature Tails

#### Linux to USB:

1. Download and verify 
2. Copy to temp Tails with Gnome Disks
3. Reboot  with temp Tails 
4. Install the minimal Tails 
5. Reboot the minimal Tails 
6. option : Install persistance 
7. option : Reboot  with full feature Tails

#### Clone from a friend:

1. Get the friend USB key
2. Boot on the Tails USB key
3. Install the minimal Tails 
4. Reboot with minimal Tails
5. option : Install persistance
6. option : Reboot  with full feature Tails


### With DVD as a destination media


#### Windows to DVD:

1. Download and verify 
2. Copy to temp Tails with a DVD Burner
3. Reboot  with temp Tails

#### Mac to DVD:

1. Download and verify 
2. Copy to temp Tails with a DVD Burner
3. Reboot with temp Tails 

#### Linux/debian to DVD:

1. Download and verify 
2. Copy to minimal Tails with Brasero
3. Reboot with temp Tails

#### Debian Hacker to DVD:

1. Download with wget
2. Verify with OpenPGP Debian-Keyringer
3. Copy to minimal Tails with Brasero
4. Reboot  with temp Tails 

### Extra possible scenarios

* no scenario : join contact or training
* virtual box


<a id="javascript"></a>

About JavaScript
================

During the monthly meeting of [[April
2014|contribute/meetings/201404#index3h1]] ([[!tails_ticket 7023]]) we
mentioned the idea of not having any JavaScript on our homepage, and by
extension, the fact that we should try to limit the amount of JavaScript
on our website in general. But this discussion was not fully concluded.
Here are a few elements to try to summarize our position, in particular
while working on the assistant:

Cons:

  - JavaScript can be dangerous for security and privacy. Tor Browser is
    supposed to block dangerous JavaScript and allow only the innocuous
    kind. But it's still better to be safe than sorry.
  - An important part of our audience want to be careful about
    JavaScript, for the reason mentioned above, and might disable it
    fully. To support this use case, we include the NoScript extension.
    So, to be coherent with this, every part of our website must be
    functional without JavaScript. This also ensures compatibility with
    all the levels of the security slider of Tor Browser ([[!tor_bug
    9387]]).
  - We don't know much about JavaScript ourselves, and even less about
    JavaScript security. So writing JavaScript seems complicated,
    costly, and error prone. Reusing JavaScript libraries like jQuery
    looks more feasible without taking much risks.

Pros:

  - We are already using JavaScript on our website (see the toggle on
    the [[download#index3h1]] page).
  - JavaScript might allow us to present better our information to the
    user and improve the quality of our website in terms of user
    experience. But using it to save us a bit of work or look cool might
    not be a good enough reason.

Conclusion:

  - We will use JavaScript to the minimum while ensure graceful
    degradation.

<a id="questions"></a>

Open problems
=============

Going in and out
----------------

  - How to handle entry and exit points? What happen when someone in
    pointed to a documentation page for a corner case?
  - How do we deal with people leaving the assistant to restart their
    system? Do we want to propose them to print a page for the remaining
    steps?
  - When people leave, do we want to give them some warning,
    explanation, good bye message?
  - Recommend people to open the website from their smartphone before
    restarting their computer.

Instructions
------------

  - How do we help better people with boot? Shall we want suggest the
    most likely keys based on the brand of the computer?
  - How to explain the installation of tails-installer in Debian
    derivatives. Ubuntu has
    [AptURL](https://help.ubuntu.com/community/AptURL) in its Firefox.
  - How to make it easier to locate the ISO image once downloaded, for
    example to feed it into Tails Installer?
  - Suggest human strategies for avoiding targeted malware:
    - Clone from a friend
    - Use a different computer than yours
    - Use Linux if available around you

Infrastructure
--------------

  - Investigate how we could monitor the usage of the assistant: most
    common path, failures, people leaving, etc. But this can have
    privacy issues.

Troubleshooting
---------------

  - Integrate system requirements.
  - Integrate information about organization doing training.
  - How do we connect all this with support, in case people are lost or
    having specific problems?
