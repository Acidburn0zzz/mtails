This is about [[!tails_ticket 5774]].

[[!toc levels=2]]

Introduction
============

tordate
-------

With *tordate* we're referring to the unholy mess found in
[[!tails_gitweb
config/chroot_local-includes/etc/NetworkManager/dispatcher.d/20-time.sh]],
whose design can be read in [[contribute/design/Time_syncing]]
(overview, steps 1-3, more or less).

tordate is a fragile pile of hacks, and it effectively makes it
possible for attackers to replay any old Tor network consensus to
Tails users. Also, in at least our current understanding of things, it
prevents us from making `/var/lib/tor persistent`, so Tails users has no
long-term Tor Entry Guards. I'm not sure more reasons need to be
stated why we must get rid of it.

The problem
-----------

When Tails boots on a system where the clock is incorrect, Tor will
not be able to bootstrap. With "incorrect" we specifically mean when
the time is outside the current Tor network consensus'
(`/var/lib/tor/cached-microdesc-consensus`) validity lifetime (e.g.
the `valid-after` and `valid-until` fields). When Tor fails to
bootstrap, Tails is effectively useless for networking (at least for
what we intend with it).

It should be noted that the clock just have to be off by a few hours
for Tor to become completely unable to bootstrap, and that's not very
uncommon. Certain OSes (including Windows up to Windows 8 at least)
set's the BIOS clock to the local time, and since Tails uses UTC (and
assumes the BIOS clock is UTC), this becomes a problem for everyone
but people living in the GMT+0/UTC timezone. Hence this is a very
serious problem.

What we want
------------

We want a mechanism to avoid the above problem that doesn't have
a network fingerprint unique to Tails. Some people may think NTP,
which is widely used, but NTP is unauthenticated, so a MitM attack
would let an attacker set the system time, which later may be used to
fingerprint the Tails user for applications/protocols that leak the
system time. And while authenticated NTP exists ([[!tails_ticket
6113]]), it's barely in use, so it'd become a great way to identify
Tails users.

In fact, we'd prefer if the sought after "mechanism" is part of Tor's
normal bootstrap process, with no extra packets sent, so the network
fingerprint becomes indistinguishable from a "normal" Tor bootstrap.
That would be a very handy fact when reasoning about how Tails users
can be fingerprinted.

Some other requirements about this mechanism:

* it has to avoid the security issues that current tordate has wrt.
  replayed Tor consensus;
* it has to be more robust that the current tordate;
* it has to be as safe as the current tordate + htpdate combination,
  e.g. wrt. failing closed when facing a replayed consensus and the
  time set by htpdate is out of the `valid-before`/`valid-until`
  interval (admitedly, the corresponding UX is totally miserable as of
  Tails 1.4, but at least we're failing closed);
* it has to work with pluggable transports;
* it has to work when not doing a full bootstrap, e.g.
  when `/var/lib/tor` is persistent;
* Tor is a bit fragile when it comes to time jumps when it's at the
  early bootstrap stages. For instance, in tordate have to restart Tor
  after setting the time according to the fetched consensus, otherwise
  it just idles, at least sometimes. This will have to be solved too;
* it should help improve the UX we provide while Tor is boostrapping
  and the time is being sync'ed, both on success and on various kinds
  of failures.

Possible solutions
==================

Ask the user what time it is
----------------------------

... when Tor fails to bootstrap for time-related reasons.

That's what ChromeOS does when the time is too wrong:

* <https://code.google.com/p/chromium/issues/detail?id=232066#c105>
* <https://codereview.chromium.org/247663003/>
* Sadly, most of their design docs, UI mockups etc. are apparently not
  accessible to non-Google employees or something, so it's not easy to
  understand why they did what. Still, the resulting code is there:
  <https://src.chromium.org/viewvc/chrome?revision=266431&view=revision>

Extend Tor some how
-------------------

E.g.:

* like [Roger
  suggested](https://lists.torproject.org/pipermail/tor-talk/2011-January/008551.html)
* [[!tor_bug 3652 desc="Export clock skew opinion as getinfo command"]]
  and its [[!tor_bug 6894 desc="answer network time requests"]] duplicate

Misc. resources
===============

* [tlsdate](https://github.com/ioerror/tlsdate)
  - Part of Debian Jessie.
  - Used by ChromeOS on every network up event => no longer easy to
    fingerprint due to low usage _iff_ we use it exactly in the same
    way (e.g. ask the very same HTTPS servers) as ChromeOS, and go on
    doing so forever.
    * their (outdated) [design
      doc](https://docs.google.com/a/chromium.org/document/d/1ylaCHabUIHoKRJQWhBxqQ5Vck270fX7XCWBdiJofHbU/edit)
    * their [tlsdate
      clone](http://git.chromium.org/gitweb/?p=chromiumos/third_party/tlsdate.git;a=summary)
    * their [upstart job](http://git.chromium.org/gitweb/?p=chromiumos/platform/init.git;a=blob;f=tlsdated.conf;h=d72d780c1f1d432bb7b7a06e787a745dbf5cdd46;hb=HEAD)
    * They query `clients3.google.com` only currently, but intend to
      use the multi-host feature some day.
