[[!meta title="Debian on Acer Chromebook R 13 CB5-312T"]]

[[!toc levels=2]]

# Models

This was initially tested on CB5-312T K7SP. Further work may happen
with a CB5-312T K2L7.

# Resources

* <http://forums.debian.net/viewtopic.php?t=103468>
* <https://wiki.debian.org/InstallingDebianOn/Asus/C201>
* <https://wiki.debian.org/InstallingDebianOn/Acer/Chromebook_13_CB5-311-T8BT>
* <https://wiki.debian.org/InstallingDebianOn/Samsung/ARMChromebook>
* <https://www.chromium.org/chromium-os/developer-information-for-chrome-os-devices/custom-firmware>
* <https://archlinuxarm.org/platforms/armv8/mediatek/acer-chromebook-r13>
* Interesting Debian packages: `vboot-utils vboot-kernel-utils u-boot-tools`

# Current status

**Update**: see "Kernel approach 4: Arch Linux kernel" for the most
promising status update so far.

Both with the Chrome OS kernel and the Debian kernel approaches I end
up with something that fails in the exact same way: at the developer
mode start screen I press Ctrl+U, and then the display shuts down but
the computer remains running indefinitely. So it seems that an attempt
at booting actually happens; if the signing is messed up, or the
partitions don't look right, I should just get an error beep when
pressing Ctrl+U. -- anonym

Also, with the ChromeOS kernel, when booting from a USB stick that
blinks on access, there's quite some blinking after booting, then
a ~20 seconds break (with `rootdelay=20`), then lots more blinking (if
I install gdm3), and then a little bit more here and then. But blindly
typing `root\n$ROOT_PASSWORD\npoweroff\n` doesn't turn the machine
off, and pressing TAB (for shell completion) doesn't trigger more
blinking. So it looks like the system might actually have started, but
provides no VT. Interestingly,
<https://wiki.debian.org/InstallingDebianOn/Asus/C201> says: "If you
are running a newer ChromeOS, CONFIG_VT may be disabled in the kernel.
this prevents the creation of consoles and the starting of Xorg from
current stable. You need to install a tool that uses the framebuffer
directly to interact with your new operating system. A patch is
available and tested, but has yet to make it to the point of being
submittable to the Xorg development team. See:
<http://demo1.faikvm.com/trac/wiki/C201>". Might this explain why the
ChromeOS kernel doesn't display anything, even if it has
`DRM_MEDIATEK` enabled? See below an attempt at booting a modified
ChromeOS kernel with `CONFIG_VT` enabled.
-- intrigeri

Wrt. the Debian kernel, the black screen might be fixed by enabling the
`DRM_MEDIATEK` Kconfig option, that's not enabled in Debian currently:

* <https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=2e726dc4b4e2dd3ae3fe675f9d3af88a2d593ee1>
* <https://lists.freedesktop.org/archives/dri-devel/2016-May/108049.html>

We should try enabling it in a custom kernel before requesting for
these modules to be shipped in the Debian one.

# On a Debian machine

<div class="note">This Debian machine does not have to be ARM.</div>

Set some variables:

	DEV=/dev/sdb
	MNT=/mnt/debian
	DATA_PART_SIZE=15292383
	sudo mkdir -p ${MNT}

If using a USB drive:

	ROOT_PART=${DEV}2

Else, if using a micro-SD card:

	ROOT_PART=${DEV}p2

Partitioning the device:

	sudo parted --script ${DEV} mklabel gpt
	sudo cgpt create ${DEV}

Below is for a 8 GiB device, adjust if needed.

	sudo cgpt add -t kernel -l kernel -b 34 -s 65536 ${DEV}
	sudo cgpt add -t data -l / -b 65570 -s ${DATA_PART_SIZE} ${DEV}
	sudo blockdev --rereadpt ${DEV}
	sudo mkfs.ext4 ${ROOT_PART}
	sudo mount ${ROOT_PART} ${MNT}
	sudo debootstrap --arch=arm64 --foreign stretch ${MNT} http://ftp.de.debian.org/debian

Unmount the filesystems

	sudo umount ${MNT}

# On the Chromebook

Enable developer mode.

At the ChromeOS Greeter screen, configure a Wi-Fi connection.

Enter a shell with `CTRL + ALT + Next` (the `Next` key is F2, on the
top row of the keyboard).

Enable booting a self-signed kernel from USB/micro-SD:

	enable_dev_usb_boot

Set some variables:

	DEV=/dev/sda
	ROOT_PART=${DEV}2
	KERNEL_PART=${DEV}1
	MNT=/media/debian
	mkdir -p ${MNT}

If using a USB stick, unmount from wherever ChromeOS decided to
auto-mount the device (apparently micro-SD are not auto-mounted):

	umount ${ROOT_PART}

In any case, mount the Debian root filesystem where we want it:

	mount ${ROOT_PART} ${MNT}

Complete the bootstrap:

	chroot ${MNT} /debootstrap/debootstrap --second-stage

Configure the system:

	cat > ${MNT}/etc/fstab <<EOF
	${ROOT_PART} / ext4 errors=remount-ro 0 1
	EOF
	echo "chromian" > ${MNT}/etc/hostname
	cp /etc/resolv.conf ${MNT}/etc/resolv.conf
	chroot ${MNT} apt-get update
	chroot ${MNT} apt-get install -y cgpt vboot-utils \
	        vboot-kernel-utils
	chroot ${MNT} passwd -d root


## Kernel approach 1 - try the Chrome OS kernel

Guess which kernel partition is the latest.  Run cgpt show and see
which one (KERN-A or KERN-B) has the highest priority.

	cgpt show /dev/mmcblk0

Copy the ChromeOS kernel to the root filesystem,
In this example we'll assume it was KERN-B:

	dd if=/dev/mmcblk0p4 of=${MNT}/boot/chromeos.kernel.signed

Declare the kernel flags:

	cat > ${MNT}/boot/kernel.flags <<EOF
	console=tty1 printk.time=1 nosplash rootwait root=${ROOT_PART} ro rootfstype=ext4 lsm.module_locking=0 debug
	EOF

Sign the kernel:

	cat > ${MNT}/boot/sign-kernel.sh <<EOF
	vbutil_kernel --repack /boot/vmlinuz.signed --keyblock \
	  /usr/share/vboot/devkeys/kernel.keyblock --version 1 \
	  --signprivate /usr/share/vboot/devkeys/kernel_data_key.vbprivk \
	  --config /boot/kernel.flags --oldblob /boot/chromeos.kernel.signed \
	  --arch arm
	EOF
	chroot ${MNT} sh /boot/sign-kernel.sh

XXX: the resulting `vmlinuz.signed` is 5.9M large, while
`chromeos.kernel.signed` was 16M. Might it be that the ChromeOS one
embeds some kernel modules we need?

Write the signed kernel to the kernel partition:

	dd bs=1M if=${MNT}/boot/vmlinuz.signed of=${KERNEL_PART}

Copy the ChromeOS kernel modules into the root filesystem:

	mkdir -p ${MNT}/lib/modules
	cp -r /lib/modules/* ${MNT}/lib/modules

Copy the non-free firmware for the wifi device:

	mkdir -p ${MNT}/lib/firmware/
	cp -r /lib/firmware/* ${MNT}/lib/firmware
	mkdir -p ${MNT}/opt/google/
	cp -a /opt/google/touch ${MNT}/opt/google/

Umount the filesystems:

	umount ${MNT}

Mark the newly written kernel partition as good and set the
priority:

	cgpt add -i 1 -S 1 -T 5 -P 12 ${DEV}

### Debugging

I (intrigeri) have also tried:

	console=tty0 printk.time=1 nosplash rootwait root=/dev/mmcblk1p2 ro rootfstype=ext4 lsm.module_locking=0 debug
	console=tty0 console=tty1 printk.time=1 nosplash rootwait root=/dev/mmcblk1p2 rw rootfstype=ext4 lsm.module_locking=0 debug
	printk.time=1 nosplash rootwait root=/dev/mmcblk1p2 ro rootfstype=ext4 lsm.module_locking=0 debug
	loglevel=7 init=/sbin/init oops=panic panic=-1 noinitrd vt.global_cursor_default=0 printk.time=1 nosplash rootwait root=/dev/mmcblk1p2 ro rootfstype=ext4 lsm.module_locking=0 debug
	console=tty1 printk.time=1 nosplash rootdelay=20 root=/dev/mmcblk1p2 rw rootfstype=ext4 lsm.module_locking=0 debug

I've also tried:

 * installing more stuff inside the rootfs:
   `tasksel install standard && apt install console-setup`

And finally these two ones did something different, i.e. the screen
stays black and desperately empty, but this time its backlight is
turned on:

	console=tty1 printk.time=1 nosplash rootwait root=/dev/mmcblk0p2 ro rootfstype=ext4 lsm.module_locking=0 debug
	console=tty0 printk.time=1 nosplash rootwait root=/dev/mmcblk0p2 ro rootfstype=ext4 lsm.module_locking=0 debug

Now, `/dev/mmcblk0` is really the internal flash storage, and not my
micro-SD, as pointing `root=` to the ChromeOS root partition like this
does start ChromeOS:

	console=tty1 printk.time=1 nosplash rootwait root=/dev/mmcblk0p5 ro rootfstype=ext4 lsm.module_locking=0 debug

So to sum up, FWIW the "backlight turns on" behavior happens whenâ€¦
`root=` is pointed to a ChromeOS kernel partition (that's definitely
not ext4). So, at least this kernel _is_ able to turn on backlight,
and for some reason it apparently does not until it has found its root
partition (even if it fails to mount it).

Note that even after dropping `rootwait` and `rootdelay=`, the
backlight doesn't turn on.

Try:

 * disable verified boot: `crossystem dev_boot_signed_only=0`

If none of these work, I'll drop the ball and will try to make
a (possibly modified) Debian kernel work instead.

## Kernel approach 2 - Debian's kernel

XXX: the following command installs a kernel that's already signed
for Secure Boot. Try the `-unsigned` one, in case that signature
may cause problems with the ChromeOS firmware.

	chroot ${MNT} apt install linux-image-arm64

We need `mt8173-evb.dtb` but it's not present in Debian's kernel
because `CONFIG_ARCH_MEDIATEK` is not enabled, so I got it from ubuntu
xenial's (although I probably should
compile myself): `linux-image-4.8.0-34-generic_4.8.0-34.36-16.04.1_arm64.deb`.

> I grabbed it from
> http://ports.ubuntu.com/ubuntu-ports/pool/main/l/linux/linux-image-4.10.0-19-generic_4.10.0-19.21_arm64.deb -- intrigeri

Put it in `${MNT}/boot`.

chroot into `${MNT}`, then:

	cd /boot

	cat > kernel-initrd.its <<EOF
	/dts-v1/;

	/ {
	    description = "Linux kernel image with one or more FDT blobs";
	    #address-cells = <1>;
	    images {
	        kernel@1{
	            description = "vmlinuz";
	            data = /incbin/("vmlinuz-4.9.0-2-arm64");
	            type = "kernel_noload";
	            arch = "arm64";
	            os = "linux";
	            compression = "none";
	            load = <0>;
	            entry = <0>;
            };
	        fdt@1{
	            description = "dtb";
	            data = /incbin/("mt8173-evb.dtb");
	            type = "flat_dt";
	            arch = "arm64";
	            compression = "none";
	            hash@1{
	                algo = "sha1";
	            };
	        };
	        ramdisk@1{
	            description = "initrd.img";
	            data = /incbin/("initrd.img-4.9.0-2-arm64");
	            type = "ramdisk";
	            arch = "arm64";
	            os = "linux";
	            compression = "none";
	            hash@1{
	                algo = "sha1";
	            };
	        };
	    };
	    configurations {
	        default = "conf@1";
	        conf@1{
	            kernel = "kernel@1";
	            fdt = "fdt@1";
	            ramdisk = "ramdisk@1";
	        };
	    };
	};
	EOF

	mkimage -f kernel-initrd.its kernel-initrd.itb

	echo "console=tty1 debug root=/dev/sda2 rw rootwait printk.time=1 nosplash lsm.module_locking=0" > kernel.flags

	vbutil_kernel --pack vmlinuz.signed \
	      --keyblock /usr/share/vboot/devkeys/kernel.keyblock \
	      --version 1 \
	      --signprivate /usr/share/vboot/devkeys/kernel_data_key.vbprivk \
	      --config kernel.flags \
	      --bootloader kernel.flags \
	      --vmlinuz kernel-initrd.itb \
	      --arch arm

**Just for the record**, here's a supposed alternative to above
`vbutil_kernel` command but it seems to work worse (Ctrl+U at the
Chrome OS developer mode boot screen behaves just as if it's not a
valid device to boot from):

	futility --debug vbutil_kernel \
	    --arch arm \
	    --version 1 \
	    --keyblock /usr/share/vboot/devkeys/kernel.keyblock \
	    --signprivate /usr/share/vboot/devkeys/kernel_data_key.vbprivk \
	    --bootloader cmdline \
	    --config cmdline \
	    --vmlinuz kernel-initrd.itb \
	    --pack vmlinuz.signed \

Install the kernel:

	dd bs=1M if=${MNT}/boot/vmlinuz.signed of=${KERNEL_PART}

Mark the newly written kernel partition as good and set the
priority:

	cgpt add -i 1 -S 1 -T 5 -P 12 ${DEV}

The resulting USB stick blinks endlessly after pressing CTRL+U,
and the backlight remains off. -- intrigeri


### Next things to try

 * installing the _uncompressed_ kernel
 * Arch Linux'
   [`.its` file, `mkimage` and `vbutil_kernel` command lines](https://github.com/archlinuxarm/PKGBUILDs/blob/master/core/linux-oak/PKGBUILD#L118)

## Kernel approach 3 - custom Chrome OS kernel

I've also tried building a custom ChromeOS kernel with added drivers
we might need. Instructions below are based on
<http://wiki.baserock.org/guides/baserock-native-cb5-311/>:

	sudo apt install gcc-5-aarch64-linux-gnu
	git checkout -b chromeos-3.18 chromium/chromeos-3.18
	./chromeos/scripts/prepareconfig chromiumos-mediatek && \
	   ./scripts/config -e CONFIG_FRAMEBUFFER_CONSOLE && \
	   ./scripts/config -m CONFIG_USB_NET_CDC_MBIM && \
	   ./scripts/config -m CONFIG_VLAN_8021Q && \
	   ./scripts/config -e CONFIG_VT && \
	   ./scripts/config -e CONFIG_VT_CONSOLE && \
	   ./scripts/config -d CONFIG_ERROR_ON_WARNING && \
	   ./scripts/config -d CONFIG_MAC80211_DEBUGFS && \
	   make \
	      ARCH=arm64 CC=aarch64-linux-gnu-gcc-5 \
	      CROSS_COMPILE=aarch64-linux-gnu- \
	      oldnoconfig WIFIVERSION=-4.2 && \
	   make -j$(ncpus) \
	      ARCH=arm64 CC=aarch64-linux-gnu-gcc-5 \
	      CROSS_COMPILE=aarch64-linux-gnu- \
	      -k Image.gz modules dtbs WIFIVERSION=-4.2
	   sudo make \
	      ARCH=arm64 CC=aarch64-linux-gnu-gcc-5 \
	      CROSS_COMPILE=aarch64-linux-gnu- \
	      INSTALL_PATH="${MNT:?}/boot" \
	      INSTALL_MOD_PATH="${MNT:?}" \
	      firmware_install modules_install dtbs_install WIFIVERSION=-4.2
	   sudo cp arch/arm64/boot/Image.gz "${MNT:?}/boot/"

Then follow the instructions for the Debian kernel above to
generate `kernel-initrd.itb` and a signed kernel, except don't
try to include an initrd, adjust the path to various files,
and set `arch = "arm64"` since that's what this kernel is:

	sudo tee "${MNT:?}/boot/kernel-chromeos-custom.its" <<EOF
	/dts-v1/;

	/ {
	    description = "Linux kernel image with one or more FDT blobs";
	    #address-cells = <1>;
	    images {
	        kernel@1{
		 description = "vmlinuz";
		 data = /incbin/("./Image.gz");
		 type = "kernel_noload";
		 arch = "arm64";
		 os = "linux";
		 compression = "none";
		 load = <0>;
		 entry = <0>;
	        };
	        fdt@1{
		 description = "dtb";
		 data = /incbin/("./dtbs/3.18.0-14546-gabea982a9d82/mediatek/mt8173-evb.dtb");
		 type = "flat_dt";
		 arch = "arm64";
		 compression = "none";
		 hash@1{
		     algo = "sha1";
		 };
	        };
	    };
	    configurations {
	        default = "conf@1";
	        conf@1{
		 kernel = "kernel@1";
		 fdt = "fdt@1";
	        };
	    };
	};
	EOF

Note that I've run `mkimage` and `vbutil_kernel` on a x86_64 system,
in case it matters.

The resulting USB stick blinks endlessly after pressing CTRL+U, and
the backlight remains off, which is exactly the same as what I see
when trying to boot the Debian kernel. So I suspect something is wrong
in our `.its` file or in the process (`mkimage`, `vbutil_kernel`) we
use to generate a signed FIT image out of it.

These yield the same result:

 * including _all_ the `mt8173-*.dtb` in the
   `.its`/`.itb` (unsure that `mt8173-evb.dtb` is the right one)
 * passing `--arch aarch64` to `vbutil_kernel`
 * passing `-D "-I dts -O dtb -p 1024"` to `mkimage`

### Next things to try

 * `make Image` instead of `make Image.gz`, as Arch Linux does
 * Arch Linux'
   [`.its` file, `mkimage` and `vbutil_kernel` command lines](https://github.com/archlinuxarm/PKGBUILDs/blob/master/core/linux-oak/PKGBUILD#L118)

## Kernel approach 4: Arch Linux kernel

I've followed
<https://archlinuxarm.org/platforms/armv8/mediatek/acer-chromebook-r13>
to install Arch Linux on a USB stick, and it booted flawlessly.
BTW, it says the board is a Mediatek Elm rev3.

So this seems to be the best starting point for us currently.

So, let's try booting Debian with the Arch Linux kernel, kernel
modules and firmware. The following instructions assumes that
the partitioning and debootstrap steps have been done already.

	ARCH_LINUX_ROOTFS=/path/to/the/extracted/rootfs

	sudo mount "${ROOT_PART:?}" "${MNT:?}"
	sudo rsync -av "${ARCH_LINUX_ROOTFS:?}"/boot/ \
	        "${MNT:?}"/boot/
	sudo rsync -av "${ARCH_LINUX_ROOTFS:?}"/lib/firmware/ \
	        "${MNT:?}"/lib/firmware/
	sudo rsync -av "${ARCH_LINUX_ROOTFS:?}"/lib/modules/ \
	        "${MNT:?}"/lib/modules/
	sudo find "${MNT:?}"/lib/modules/ -name *.ko.gz \
	          -exec gunzip '{}' \;
	sudo dd bs=1M if="${MNT:?}/boot/vmlinux.kpart" of="${KERNEL_PART:?}"
	sync
	sudo umount "${MNT:?}"

Boot from the USB stick, log in as root, and run `depmod` so that the
kernel modules we have uncompressed (as the version of `kmod` in
Debian Stretch does not support compressed ones) are indexed.
Then reboot.

### Status

 * Debian Stretch boots fine and starts GDM (if installed).
 * I can log into a GNOME on Wayland session.
 * The "Search" key (that replaces Caps Lock) is mapped to Super, i.e.
   it opens the Overview in GNOME Shell.
 * Touchpad: tap-to-click (once enabled) and two-finger scrolling work.
 * Wi-Fi works.
 * Display backlight brightness can be adjusted with the GNOME Shell
   UI (in the top-right menu).
 * The GNOME sound preferences show no sound device, and I see error
   messages in the Journal about `mtk-rt5650 sound`.
 * The GNOME UI doesn't notice when AC power is disconnected.
 * Accelerometer and automatic screen rotation: mostly works, not as
   clever as I hoped.
 * Touchscreen: basically works, but I didn't try to exercise it much.
   It seems that some parts of the GNOME UI don't work with touch but
   _only_ when the display is rotated (e.g. flipped to tablet mode).

### Next things to try

 * Arch Linux ARMv8 AArch64 Multi-platform rootfs tarball, that ships
   with a mainline kernel: it'll probably tell us what's the hardware
   support level we can possibly get with a Debian kernel (assuming
   all the needed build options are enabled) currently.
