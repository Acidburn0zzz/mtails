**Ticket**: [[!tails_ticket 7161]]

[[!toc levels=3]]

# The plan

## Big picture

XXX: how do we manage *.dl.amnesia.boum.org DNS?

We decided to implement a two-way strategy for this feature:

* Write JavaScript code that DAVE will use to dynamically modify the
  hostname, in the download link it gets from the ISO description file
  (IDF), so that each user is pointed to random mirror.
  - [Git repository](https://git-tails.immerda.ch/mirror-pool-dispatcher/)
  - Vanilla JS (no frameworks)
  - The code must work from inside a Firefox extension (DAVE) at
    least; ideally it is library code that can also be used from a web
    page (see below for an actual use case).
  - Store the configuration file in a dedicated
    ikiwiki overlay, for finer-grained access control possibilities
    to it (e.g. we may want to let people who don't have commit access
    to Git maintain the mirrors pool).
  - Configuration for the JS is loaded from a JSON file hosted on our
    website. It attaches
    a weight to each mirror. Weight 0 means that the mirror is
    currently disabled, and will never be redirected to. We're using
    JSON and not YAML to avoid the need to use a third-party parser.

* Keep using DNS to point to 3-5 fast and reliable mirrors. This will
  be the fallback for people who do not use JS. So we still need a DNS
  dynamic update system; we can simply re-purpose the one we already
  have (`dl.amnesia.boum.org`).

* What to do for downloads we offer outside of the Installation
  Assistant, that are not supported by DAVE, such as images for
  release candidates? What to do for browsers that don't have DAVE,
  e.g. non-Firefox browsers, the
  [[wget download option|install/expert/usb]], and
  documented download methods that rely on
  [[!tails_gitweb wiki/src/install/inc/steps/download.inline.html]]?
  - A first iteration could simply use the DNS pool. This might put
    too much load on the few servers in it though, so it might only
    work if we're able to add a few really fast servers in it.
    It might be that going straight to the second iteration is simpler
    in the end.
  - In second iteration, we can use our JavaScript code to rewrite the
    download link on the call for testing web page. If we do this, we
    need to include our JavaScript library in a dedicated ikiwiki
    overlay, and load + call it on every page that contains an ISO
    download link (or simply on _every_ page).

# Initial research

See [[HTTP_mirror_pool/archive]].
