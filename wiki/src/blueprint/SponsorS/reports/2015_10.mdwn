[[!toc levels=2]]

<div class="caution">
<strong>Deadline: 2015-11-05</strong>
</div>

<div class="note">
Deliverable identifiers and descriptions are not free-form: they must
be copy'n'pasted as-is from the proposal sent to the sponsor.
</div>

This reports covers the activity of Tails in October 2015.

Everything in this report can be made public.

Note: the numbers preceded with a `#` correspond to tickets in our bug
tracker which contains more technical details and timeline. For example,
ticket #6938 can be seen on <https://labs.riseup.net/code/issues/6938>.

# A. Replace Claws Mail with Icedove

## A.n. description of subsection

- A.n.m. description of deliverable: ticket numbers

  status summary:

  * what was done
  * what is the outcome (how it makes Tails better)
  * what was not done, and why

# B. Improve our quality assurance process

## B.2. Continuously run our entire test suite on all those ISO images once they are built

- B.2.3. Design a solution to generate a set of Jenkins jobs
  to run tests.

Early in October we finally settled to the best option we found to
reboot the VM between each run of the test suite in Jenkins (#9486).
We also experimented with the sharing of artifacts between the build jobs
and their related test jobs, so that the later would have access to the
automatically build ISO and concluded our deployment was functionnal. (#9597)
We then had to upgrade our jenkins-job-builder setup to the new 1.3.0
version that was uploaded into Debian. It appeared that it was necessary
to be able to configure some Jenkins plugins in our test jobs. (#9646)
We also pushed upstream a patch to handle the CucumberTestReport Jenkins
plugin, so that we can use it easily in our setup. It has been merged and
will be released with jenkins-job-builder 1.4.0.
We worked together with the test suite team on getting video artifacts
stored along this others for failing scenarios of a test job. (#10154)
With all this, we were able to deploy at the end of the first week of
October automated tests of ISO build automatically for our main release
branches, which helped us to confirm our design was working. (#10117)

- B.2.4. Deploy the best solution from this research.

With this first initial and limited deployment, we corrected some tiny
configuration details we didn't catch during the design. (#10215, #10417)
We stumbled upon a bug due to hardware or kernel troubles with nested
virtualization we had to workaround. (#10229)
It also helped in fixing some issues in the interaction of our test
suite code once deployed in Jenkins. (#10356, #10359)

- B.2.5. Write library code that maps Jenkins jobs from building to testing.

Now that we had a good example of how to write a test job in our
jenkins-job-builder setup, triggered by its upstream build job, we
adapted our code that generates active branches build jobs to also
output their corresponding test jobs. We also ended up using the power
of a more recent jenkins-job-builder version to simplify in great length
this code. (#10118, #10119)
It was already clear that we wouldn't be able to notify the committers
at first, as the number of failures were too high and we didn't want to
encourage them not to read this notifications.
So we planned a first iteration were only the test suite team would
receive them, so that they'll be able to work on the remaining tests
being too fragile. (#10287)
By October 15th, we had this code deployed live for all active branches.
However, we quickly understood that some of our branches were too old to
run correctly the test suite in Jenkins, given the intense development
there were at that moment. We had to deactivate the automated tests for
branches that were based on our stable branch, mainly branches meant to
work on the website and the documentation. Other feature or bugfix
branches were still automatically tested. This situation is only
temporary, and the deactivated branches will be reactivated when our
stable branch will get all the necessary updates, which happened after
the 1.7 release.
We're also discussing in our public mailing list if it makes sense to
run our whole test suite on such documentation branches or not.

# C. Scale our infrastructure

- C.4.3. Administer our services upto milestone III

We kept on answering to the request from the community as well as taking
care of security updates.
We had to reinstall one of our ISO builder VM that was failing too
often. (#10334)
The GnuPG key of our Debian repository was going to expire, so we had to
update it. (#10419)
We thought a bit further how we could make our Jenkins instance public
(#6270) which probably means to update to the upstream version. (#10068)

# D. Migration to Debian Jessie


# E. Release management
