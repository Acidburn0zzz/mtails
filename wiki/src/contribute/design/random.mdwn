[[!meta title="Random numbers"]]

As [[mentioned in the PELD spec|contribute/design#spec-entropy]], it
is not so easy to get good pseudo-random numbers in the context of
a Live system. This document describes how Tails behaves in this area,
and the work that is left to be done.

[[!toc levels=2]]

# Entropy sources

Tails is relying on the Linux kernel's entropy gathering facilities.

Tails does not trust the CPU's hardware random number generator to
be correctly implemented and not having a back door, so it disables
the CONFIG_RANDOM_TRUST_CPU kernel option. Note that the entropy
from the CPU's hardware random number generator is still mixed into
the entropy pool, but it is not credited as "good" entropy. 

## haveged

<a id="haveged"></a>

Tails used to ship [haveged](http://issihosts.com/haveged/).
haveged implements the HAVEGE algorithm to gather randomness from
CPU timings. It runs as a service in the userspace and fills the entropy
pool immediately when it is started and keeps filling it if the kernel’s
entropy count falls low by reads from /dev/random.

There are multiple issues with haveged:

* The fact that it tries to use timing information from CPU
  instructions while running in userspace, thereby being subjected to
  the kernel’s scheduler, which could impact the randomness of the
  timings [^1]

* The CPU instruction it uses (RDTSC) returns predictable results in
  some virtualized environments [^2]

* No one seems to know whether haveged actually provides any good
  randomness. AFAIK, it was never thoroughly analyzed by experts. The
  haveged tests which are supposed evaluate the produced randomness
  also pass if haveged is fed with a constant input instead of the CPU
  timings [^3].

[^1]: https://twitter.com/mjg59/status/1181426468519383041
[^2]: https://tls.mbed.org/tech-updates/security-advisories/polarssl-security-advisory-2011-02
[^3]: http://jakob.engbloms.se/archives/1374

Since Linux 5.6, using the getrandom system call and reading from
/dev/random will not block (for long) anymore on x86 systems, because
the kernel now has a built-in random number generator which uses CPU
timings. This is superior to haveged because it is not subjected to the
kernel's scheduler. So Tails now relies on that instead of haveged.

Tails also ensures that reading from /dev/urandom returns good random
numbers, by ensuring that the entropy pool used by urandom is filled
with at least 512 bytes of entropy during boot. This is done in 
[[!tails_gitweb config/chroot_local-includes/usr/share/initramfs-tools/scripts/init-top/random]].

To also ensure that reading from /dev/urandom returns good random
numbers, Tails ensures that the entropy pool used by urandom is filled with at least 512 bytes
of good entropy.

# Remaining concerns

## Persistent entropy pool seed

Quoting [the Linux kernel documentation](https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/drivers/char/random.c):

    When any operating system starts up, it will go through a sequence
    of actions that are fairly predictable by an adversary, especially
    if the start-up does not involve interaction with a human operator.
    This reduces the actual number of bits of unpredictability in the
    entropy pool below the value in entropy_count.  In order to
    counteract this effect, it helps to carry information in the
    entropy pool across shut-downs and start-ups.

Tails does currently not persist an entropy pool seed, which means that
it does not carry any information in the entropy pool across shutdowns
and startups. Solving this is work in progress on [[!tails_ticket 11897]].
