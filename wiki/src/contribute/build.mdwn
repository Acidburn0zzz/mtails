[[!meta title="Building a Tails image"]]

The following instructions will lead you through the process of building
a Tails ISO image with [Rake], [Vagrant] and [vagrant-libvirt].

[Rake]: http://rake.rubyforge.org/
[Vagrant]: http://vagrantup.com/
[vagrant-libvirt]: https://github.com/vagrant-libvirt/vagrant-libvirt/

[[!toc levels=2]]

# Requirements

To build Tails you need:

 * Debian 9 (Stretch) or newer
 * the KVM virtual machine hypervisor
 * at least 1 GiB of free RAM
 * 20 GB of free storage

# Setup the build environment

1. To install everything the Tails build system needs, execute the
   following command:

       sudo apt install \
           git \
           rake \
           libvirt-daemon-system \
           dnsmasq-base \
           ebtables \
           qemu-system-x86 \
           qemu-utils \
           vagrant \
           vagrant-libvirt \
           vmdebootstrap && \
       sudo systemctl restart libvirtd

2. Ensure your user is in the relevant groups:

       for group in kvm libvirt libvirt-qemu ; do
          sudo adduser "$(whoami)" "$group"
       done

3. Logout and log back in to apply the new group memberships.

<a id="vagrant-known-issues"></a>

# Known issues and workarounds

* If Vagrant failed to start the Tails builder VM the first time
  (e.g. because of permission issues or the `kvm` module not veing
  loaded) it will not automatically run the provisioning script, so
  you must run `rake vm:provision` yourself before attempting your
  first `rake build`. If that fails, run `rake vm:destroy`, which
  removes this half-broken VM, and then start from scratch with `rake
  build` or similar.

* `ruby-fog-libvirt <= 0.0.3` has a
  [bug](https://github.com/fog/fog-libvirt/issues/21) that will make
  Vagrant crash when trying to start the VM if you have any libvirt
  domain defined with a floppy (`fd`) as part of the boot order, set
  via `<os>` tag; please remove all such occurrences! If you really
  need to have a floppy as part of some domain's boot order, please
  set it via `<disk>` by adding `<boot order='1'/>` which does not
  trigger the bug.

* If the system you are setting this up on ever had the old
  (Virtualbox-based) Vagrant setup, you will get errors unless you
  clean up these parts:

  - Remove any old pinnings for `vagrant` and `ruby-net-ssh`. If you
    followed our old instructions to the point, that should be:

        sudo rm /etc/apt/preferences.d/tails-build-vagrant

  - Clearing the Vagrant configuration seems to also often solve
    issues:

        rm -r ~/.vagrant.d

* If Vagrant fails to start the Tails builder VM with an error similar
  to `Virtio-9p Failed to initialize fs-driver with id:fsdev-fs0`,
  see [[!tails_ticket 11411]].

# Build Tails

Once all dependencies are installed, get the Tails sources and
checkout the [[development branch|contribute/git#main-repo]]:

    git clone https://git-tails.immerda.ch/tails
    cd tails
    git checkout devel
    git submodule update --init

Build Tails using Vagrant:

    rake build

The first time, this can take a little while to download the base virtual
machine from Tails mirror (around 300 MB). It will then boot the machine,
set it up and start the build process. When done, several `tails-*` files
should appear in the current directory.

After you are done working on Tails, do not forget to shut the virtual
machine down:

    rake vm:halt

One may also want to [[contribute/customize]] their image before building.

To know all available Rake tasks, please run `rake -T`.

# Build settings

You can customize the build system using two environment variables:

 * `ARTIFACTS` is the path where the ISO image is stored once the
   build completes; for example:

        ARTIFACTS='/path/to/directory'

 * To tweak other build settings, use `TAILS_BUILD_OPTIONS`,
   a space-separated list of build options documented below.

   For example, you can speed up the build by setting:

        export TAILS_BUILD_OPTIONS="ram gzipcomp"

   This will force the build to happen in RAM and SquashFS compression
   will be done using *gzip*.

## Memory build settings

Tails builds way faster when everything is done in memory. If your computer
runs Linux and happens to have more than 7 GB of free memory before you
start the virtual machine, it will automatically switch to 'build in RAM'
mode.

To force a specific behaviour please set:

 * **ram**: start the virtual machine with 7 GB of memory, build Tails
   inside a `tmpfs`. Build fails if the system is not in a proper state to
   do so.
 * **noram**: start the virtual machine with 512 MB of memory if not already
   done, build Tails using the virtual machine hard disk.

## Network settings

 * **offline**: This option will make the build system do its best to
   not depend on the network, e.g. if you use the VM's caching proxy
   if will *only* use cached APT lists and packages. Use this when you
   do not have an Internet connection.

## SquashFS compression settings

One of the most expensive operations when building Tails is the creation
of the final SquashFS. It also depends on the compression algorithm used.
When working on the `stable` or `testing` branch, the image will be made
using the slow but efficient default. Any other setup will switch to the
faster *gzip*.

Forcing a specific behaviour can be done using:

 * **gzipcomp**: always use *gzip* to create the SquashFS.
 * **defaultcomp**: always use the default compression algorithm.

## Git settings

The build system can only work on files that have been *committed* to the Git
repository. By default, it will refuse to start a build in presence of
uncommitted changes. This behaviour can be controlled by:

 * **ignorechanges**: allow to make a build that will ignore changes in the Git
   repository.

## Variations useful for testing build reproducibility

These options allow one to vary the build environment in ways that may
affect reproducibility of the ISO image:

 * **dateoffset=_+n_**, **dateoffset=_-n_**: change the virtual
   machine system time by _+n_ or _-n_ days.

 * **cpus=_n_**: allocate _n_ CPUs to the virtual machine.
   Obviously you should not allocate more virtual CPUs than the number
   of cores available to the host system. When using Linux, the number
   of CPUs allocated will default to be the same as the host system.

 * **cpumodel=_model_**: type of the CPUs allocated to the virtual
   machine. See
   [the corresponding libvirt documentation](https://libvirt.org/formatdomain.html#elementsCPU).

 * **machinetype=_type_**: type of the QEMU machine; see the output of
   `qemu-system-x86_64 -machine help` for available options.

## Developer convenience settings

 * **keeprunning**: do not clean up the builder VM on build
   success. The wiki will be cached for subsequent builds with this
   option set.

 * **forcecleanup**: ensure a new builder VM is used for `rake build`,
   and also clean up this VM after the build, no matter if it
   succeeded or not.

 * **rescue**: implies **keeprunning** and will also not clean up the
   build directory, which is useful for investigating build failures.

## Jenkins

  * **mergebasebranch**: if building from a branch (not tag!) this
    forces a merge of the base branch before the build process starts
    for real. This is mostly meant for our Jenkins deployment, so use
    at your own risk.

## HTTP proxy settings

Building Tails requires downloading a little bit more than 1 GB of Debian
packages. To preserve bandwidth and developer sanity, using a HTTP proxy is
nearly a must. Tails virtual machine contains a fully configured local HTTP
proxy that will be used if no other local proxy is defined.

The following flags can be used to force a specific behaviour:

 * **extproxy**: use the proxy configured through the `http_proxy`
   environment variable. Fail if it is not set.

   <div class="bug">

   At least one step of the build does not honor the external proxy
   settings, so outgoing Internet connections from the build VM must be
   allowed to go through anyway.

   </div>

 * **vmproxy**: use the local proxy configured in the virtual machine even
   if a local HTTP proxy is set.

 * **noproxy**: do not use any HTTP proxy.

Verifying if the resulting ISO is reproducible
==============================================

See [[verification|contribute/build/reproducible#verify]] section.

More information
================

More documentation about the build process can be found in the [Debian
Live Manual](http://live.debian.net/manual/oldstable/html/live-manual.en.html).

Details about how this Vagrant build system is setup, see its
[[design page|build/vagrant-setup]].

Other related pages:

[[!map pages="contribute/build/*"]]
