[[!meta title="Interface between developers and Release Managers"]]

Code changes merged into our release branches (`stable`, `testing`, `devel`) may
impact the [[Release
Managers|contribute/working_together/roles/release_manager]]' work: for example,
the Release Manager on duty is on the frontline when manual testing done during
the release process identifies critical breakage at the last minute before we
publish a new version of Tails. This can disrupt the release schedule and lead
to highly stressful situations.

These guidelines are meant to decrease the risk of seeing such problems happen.

[[!toc levels=2]]

# Changes that may impact automatic upgrades

For changes that may impact automatic upgrades, the responsible developers MUST
put the Release Managers into the loop in advance, way before the code is
merged. This allows the Release Managers to:

 - Raise any concerns they may have about the design or implementation
   of the proposed changes.
 - Propose extra manual tests that could be done ahead of merging
   and/or during the manual testing session of the release process,
   in order to build confidence in the proposed changes.
 - Make developers benefit from an independent "What can possibly go
   wrong?" brainstorming.

# During a code freeze

We sometimes [[freeze|contribute/release_schedule]] one of our release branches,
in order to stabilize it before a release.

During such a code freeze, developers MUST notify the Release Manager on duty
about freeze exceptions they intend to propose or merge. And then:

 - If the proposed changes may impact automatic upgrades, as a developer, ensure
   you get feedback from the Release Manager on duty, before you apply
   a freeze exception.

 - Else, that is in the general case, as a developer you don't need to block on
   the Release Manager's feedback before you apply the freeze exception.
