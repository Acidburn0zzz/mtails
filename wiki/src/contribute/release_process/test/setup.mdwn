[[!meta title="Test suite installation and setup"]]

Here's how to set up an environment to run our automated test suite.
Alternatively, you way want to use the `tails::tester` class from the
[[!tails_gitweb_repo puppet-tails]] Puppet module.

Once you have a working environment, see [[test/usage]].

[[!toc levels=2]]

Operating system
================

If you usually run another operating system than Debian Buster,
then you need to:

1. Enable nested virtualization on your host system.

   For example, if the host system has an Intel CPU:

         if [ "$(cat /sys/module/kvm_intel/parameters/nested)" != Y ]; then
            echo "options kvm_intel nested=Y" \
                 >> /etc/modprobe.d/kvm.conf
         fi

2. Prepare a Buster virtual machine.

3. And then, every step below applies to this Buster virtual machine,
   instead of to the host system.

Install dependencies
====================

To install the dependencies on our test suite:

1. Enable the `non-free` APT component.

2. Install the following packages:

        sudo apt update && \
        sudo apt install \
            cucumber \
            devscripts \
            dnsmasq-base \
            gawk \
            git \
            i18nspector \
            imagemagick \
            ffmpeg \
            libcap2-bin \
            libvirt-clients \
            libvirt-daemon-system \
            libvirt-dev \
            libvirt0 \
            obfs4proxy \
            openssh-server \
            ovmf \
            pry \
            python-jabberbot \
            python-potr \
            python3-opencv \
            python3-pil \
            qemu-kvm \
            qemu-system-common \
            qemu-system-x86 \
            qemu-utils \
            redir \
            ruby-guestfs \
            ruby-json \
            ruby-libvirt \
            ruby-packetfu \
            ruby-rb-inotify \
            ruby-rspec \
            ruby-test-unit \
            seabios \
            tcpdump \
            tcplay \
            tor \
            unclutter \
            virt-viewer \
            x11vnc \
            tigervnc-viewer \
            x264 \
            xdotool \
            xvfb \
            && \
        sudo service libvirtd restart

Other requirements
==================

Synchronized clock
------------------

The system running the test suite needs an accurate clock since we
sync the clock from the host to the Tails guest after a background
snapshot restore to appease Tor.

You might want to enable `systemd-timesyncd.service` or your favorite
time synchronization tool for this.

File permissions
----------------

The user that runs QEMU (via libvirt) needs read-access at least to
the content of `features/misc_files/` in the Git checkout.

AppArmor tweaks
---------------

If you have AppArmor enabled:

* You need to add the `/tmp/TailsToaster/** rwk,` line
  to `/etc/apparmor.d/libvirt/TEMPLATE.qemu`, in the
  `profile LIBVIRT_TEMPLATE` section; then delete
  `/etc/apparmor.d/libvirt/libvirt-*` and retry.
  If you use a custom `TMPDIR` to run the test suite,
  replace `/tmp/TailsToaster` with the value of that `$TMPDIR`.

Patched QEMU
------------

Due to [[!tails_ticket 12142]]
aka. [[!debbug 851694]], any test scenario that creates a persistent
volume will fail. To work around this problem, rebuild [[!debpts
qemu]] locally with the upstream fix applied. For example, the `qemu`
source package in this APT suite has the fix:

        deb-src http://deb.tails.boum.org/ isotester-stretch main

This problem does not affect host systems that run Debian Buster
or newer, but those cannot run our test suite at all due to
[[!tails_ticket 15460]].

Special use cases
=================

Access the system under test with VNC
-------------------------------------

If you're running the test suite in a nested environnement, install
`tigervnc-viewer` on the bare metal level-0 host. Then you can use vncviewer's
`-via` option so that it automatically setup a ssh tunnel to your first level
test suite domain for you and display the Tails VM. E.g.
where `$DISPLAY` is the display given to you by `run_test_suite` (often 0):

    vncviewer -viewonly -via user@level0 localhost:$DISPLAY
