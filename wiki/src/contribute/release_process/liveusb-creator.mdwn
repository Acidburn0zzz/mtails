[[!meta title="Releasing liveusb-creator"]]

[[!toc levels=2]]

The big picture
===============

Upstream
--------

For this package, "upstream" means, from a Debian packaging
point-of-view, the state of our upstream branches. Let's not pretend we
have not forked liveusb-creator, and admit we are now upstream for our
own version.

The `master` branch must always be the one that targets current Tails.
That's what we have always done, and right
now `master` is indeed targeting Wheezy.

But that's not enough, since we also need to put releases out with code
that works on current Debian testing/sid. Thus, we maintain several upstream
release branches in parallel, each with their own major version number:

 * for releases that target Wheezy:
   * version = `3.x`
   * tag = `tails-installer_3.x`
 * for work and releases that target Jessie (and, as long as compatible,
   that target testing/sid as well):
   * branch = feature/jessie (that's what we've been doing so far)
   * version = `4.x`
   * tag = `tails-installer_4.x`

Once we can't support both Jessie and testing/sid with the same
codebase anymore, we'll fork a new upstream release branch that targets Stretch,
it'll be called feature/stretch, use version 5.x, etc.

Packaging
---------

We're using [DEP-14 conventions](http://dep.debian.net/deps/dep14/),
except for our `master` branch which is used for upstream development
targetted at current Tails, as said above. More specifically:

* The `pristine-tar` branch contains the binary delta between DFSG-freed
  tarballs and the corresponding tag. It's automatically maintained by
  `gbp import-orig`.
* The `debian/sid` branch is the one we build the package that we upload to
  Debian unstable. The tags on this branch are called `debian/$package_version`,
  which is the default when creating them with
  `gbp buildpackage --git-sign-tags --git-tag-only`;
  in practice this is something like `debian/4.0+dfsg-1`.
* The `debian/$codename-backports` branch is the one used to prepare packages
  that we upload to the official backports repository for Debian `$codename`.
  E.g. here we want to have `debian/jessie-backports` soon after the initially
  uploaded package reaches Debian testing. The tags on this branch are also called
  `debian/$package_version`. In practice this is something like
  `debian/4.0+dfsg-1~bpo8+1`.
* The `tails/$codename` branch is the one used to prepare packages that we upload
  to the Tails APT repo, but not to Debian -- e.g. 3.x as currently used on
  Tails/Wheezy will never be uploaded to Debian. It's actually XXX our current `debian`
  branch, simply renamed to `tails/wheezy`.
* Additionally, we use `tails/$feature` branches for other Tails-specific packaging branches.
* The `upstream/3.x+dfsg`, `upstream/4.x+dfsg`, etc. branches are what we tell `gbp`
  to use as its "upstream" branch.

Topic branches
--------------

In practice, it's expected that Tails contributors submit bugfix and
feature branches forked off master, because they want them part of next
Tails release. Hence, it will happen that code lands into master first,
and in turn into a new 3.x upstream release, before it lands into
`feature/jessie` and in turn into a new 4.x upstream release.

For how to package `bugfix` and `feature`, see
[[the dedicated page|topic_branch]] (probably outdated).

Workflow
========

Generate a new upstream tarball
-------------------------------

The new upstream version should be something like `4.x`, based on the
upstream branch:

    export NEW_UPSTREAM_VERSION=4.x
	export UPSTREAM_DEV_BRANCH=master
	git checkout "$UPSTREAM_DEV_BRANCH" && git tag -s "tails-installer_$NEW_UPSTREAM_VERSION"
    git archive \
       --prefix="liveusb-creator-$NEW_UPSTREAM_VERSION/" \
       --output="../tarballs/liveusb-creator_$NEW_UPSTREAM_VERSION.tar.gz" \
       "$UPSTREAM_DEV_BRANCH"
	git tag -S "tails-installer_$NEW_UPSTREAM_VERSION"

Push branch and tag:

	git push origin "$UPSTREAM_DEV_BRANCH" && \
	git push --tags

Update the Debian package for Tails
-----------------------------------

Checkout the branch with Debian package specifics:

    export UPSTREAM_PKG_BRANCH=upstream/4.x+dfsg
    export PACKAGING_BRANCH=tails/jessie
    git checkout "$PACKAGING_BRANCH"

Verify that `gbp.conf` contains the correct upstream and Debian (packaging) branches,
and that `pristine-tar` usage is enabled, i.e.:

	[DEFAULT]
	upstream-branch = upstream/4.x+dfsg
	debian-branch = tails/jessie
	pristine-tar = True

Create a DFSG free tarball from the previously created Git archive and
reimport it into the source tree. Note that this modifies the
`debian-branch` (specified in `gbp.conf`), by merging the commit that imported
the current DFSG free upstream tarball into the `upstream-branch`.

	mk-origtargz -C ../tarballs \
	 --copy ../tarballs/liveusb-creator_$NEW_UPSTREAM_VERSION.tar.gz
	gbp import-orig \
	 --upstream-vcs-tag="tails-installer_$NEW_UPSTREAM_VERSION" \
	   ../liveusb-creator_$NEW_UPSTREAM_VERSION+dfsg.orig.tar.gz

Update `debian/changelog`:

    git-dch && dch -e

(Do not forget to set the appropriate release.)

Commit the changelog:

    git commit debian/changelog -m "$(head -n 1 debian/changelog | sed -e 's,).*,),')"

Build a new Debian package (use a i386 chroot with the correct target distribution):

    gbp buildpackage

If `gbp buildpackage` complains about a missing `upstream/$VERSION`,
then manually download the corresponding tarball (which can be found
in our Debian repo unless upstream just had a new release) and place
it in `..`, and then re-run the command with `--git-no-pristine-tar`.

Add a signed tag to the Git repository and push the changes:

    gbp buildpackage --git-tag-only --git-sign-tags && \
    git push origin "$UPSTREAM_PKG_BRANCH" \
                    "$PACKAGING_BRANCH" \
					pristine-tar && \
    git push --tags

Add the Debian package to Tails
-------------------------------

Sign the package:

    debsign $CHANGES_FILE

Upload:

    dupload --to tails $CHANGES_FILE
