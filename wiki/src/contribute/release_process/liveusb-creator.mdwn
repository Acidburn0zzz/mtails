[[!meta title="Releasing liveusb-creator"]]

[[!toc levels=1]]

Upstream and packaging
======================

For this package, "upstream" means, from a Debian packaging
point-of-view, the state of our master branch. Let's not pretend we
have not forked liveusb-creator, and admit we are now upstream for our
own version.

The master branch must always be the one that targets current Tails
 (in order to avoid confusing Tails contributors who don't need to 
 learn a new Git workflow). That's what we have always done, and right 
 now master is indeed targeting Wheezy.

But that's not enough, since we also need to put releases out with code 
that works on current Debian testing/sid. So, we'll be maintaining 
several upstream release branches in parallel, each with their own major 
version number:

 * for releases that target Wheezy:
   * version = 3.x
   * tag = tails-installer_3.x 
 * for work and releases that target Jessie (and, as long as compatible,\
   that target testing/sid as well):
   * branch = feature/jessie (that's what we've been doing so far)
   * version = 4.x
   * tag = tails-installer_4.x
    
Once we can't anymore support both Jessie and testing/sid with the same 
codebase, we'll fork a new upstream release branch that target Stretch, 
it'll be called feature/stretch, use version 5.x, etc.

Still, most of the time, we will be releasing -N "Debian"-specific
packages, that really are packaged Git snapshots, rather than new
"upstream" releases. Only when we really need it, we will update the
"orig" tarball from our master branch.

Topic branches
==============

In practice, it's expected that Tails contributors submit bugfix and 
feature branches forked off master, because they want them part of next 
Tails release. Hence, it will happen that code lands into master first, 
and in turn into a new 3.x upstream release, before it lands into 
feature/jessie and in turn into a new 4.x upstream release. 

For how to package `bugfix` and `feature`, see
[[the dedicated page|topic_branch]].

Generate a new upstream tarball
===============================

**If needed** (that is, basically if dpkg-source complains, when
running gbp buildpackage below, that it cannot represent changes in
binary files), generate a new upstream tarball from the tip of the
upstream branch.

The new upstream version should be something like `3.11.6+tails1`:
only increment the number after `+tails` if the new release is still
based on Fedora's 3.11.6. Else, set the part before `+tails` to the
new Fedora release's version number, and reset the right side to
`+tails1`.

    export NEW_UPSTREAM_VERSION=XXX
	git checkout master && git tag -s tails-installer_$NEW_UPSTREAM_VERSION
    git archive \
       --output=../tarballs/liveusb-creator_$NEW_UPSTREAM_VERSION.tar.xz \
       master

Update the Debian package
=========================

Checkout the branch with Debian package specifics:

    git checkout debian

Create a DFSG free tarball from the previously created Git archive and
reimport it into the source tree. Note that this creates a commit on the
debian-branch specified in gbp.conf, merging the current upstream version
into it.

	mk-origtargz -C ../tarballs \
	 --copy ../tarballs/liveusb-creator_$NEW_UPSTREAM_VERSION.tar.gz
	gbp import-orig \
	 --upstream-vcs-tag=$NEW_UPSTREAM_VERSION \
	   ../tarballs/liveusb-creator_$NEW_UPSTREAM_VERSION+dfsg.orig.tar.gz

Update `debian/changelog`:

    git-dch && dch -e

(Do not forget to set the appropriate release.)

Commit:

    git commit debian/changelog -m "$(head -n 1 debian/changelog | sed -e 's,).*,),')"

Build a new Debian package (use a Wheezy/i386 chroot):

    gbp buildpackage

If `gbp buildpackage` complains about a missing `upstream/$VERSION`,
then manually download the corresponding tarball (which can be found
in our Debian repo unless upstream just had a new release) and place
it in `..`, and then re-run the command with `--git-no-pristine-tar`.

Add a signed tag to the Git repository and push the changes:

    git-buildpackage --git-tag-only --git-sign-tags && \
    git push origin master:master \
                    debian:debian && \
    git push --tags

(Make sure both `master` and `debian` are pushed.)

Add the Debian package to Tails
===============================

Sign the package:

    debsign $CHANGES_FILE

Upload:

    dupload --to tails $CHANGES_FILE
