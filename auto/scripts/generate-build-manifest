#!/usr/bin/perl
# Â© 2015 Cyril Brulebois <cyril@debamax.com>, for the Tails project.

use strict;
use warnings;
use File::Slurp;
use List::MoreUtils qw(uniq);
use YAML::XS;


# NOTE: For reference, the first one is generated by debootstrap
# (>= 1.0.73), while the other two are generated by the apt-get
# wrapper installed in the chroot during the build.
my %package_type = qw(
    deburis binary
    binuris binary
    srcuris source
);

# NOTE: Keep those in sync with the URIs used in sources.list during
# the build.
my %origin_name = qw(
    http://ftp.us.debian.org/                           debian
    http://snapshot.deb.tails.boum.org/debian/          debian
    http://released.deb.tails.boum.org/debian/          debian

    http://security.debian.org/                         debian-security
    http://snapshot.deb.tails.boum.org/debian-security/ debian-security
    http://released.deb.tails.boum.org/debian-security/ debian-security

    http://deb.tails.boum.org/                          tails
    http://snapshot.deb.tails.boum.org/tails/           tails
    http://released.deb.tails.boum.org/tails/           tails

    http://deb.torproject.org/                          torproject
    http://snapshot.deb.tails.boum.org/torproject/      torproject
    http://released.deb.tails.boum.org/torproject/      torproject
);

### Various usability checks:
sub usage {
    die "Usage: $0 debootstrap-dir manifest-file";
}

my $debootstrap = shift @ARGV
    or usage;
my $manifest = shift @ARGV
    or usage;

if (! -d $debootstrap) {
    print "E: $debootstrap isn't a directory\n";
    usage;
}

### Read (package, version, uri) tuples and generate a single (package, version) list:
my $data;
foreach my $type (keys %package_type) {
    my $path = "$debootstrap/$type";
    if (! -f $path ) {
        print "E: $path is missing, wrong debootstrap-dir parameter? (got: $debootstrap)\n";
        usage;
    }
    print "I: processing $path\n";
    foreach my $line (read_file($path)) {
        chomp $line;
        my ($package, $version, $uri) = split / /, $line;
        push @{ $data->{ packages }->{ $package_type{$type} } }, { package => $package, version => $version, };
    }
}

### Extract list of (origin, reference) from the build configuration:
my %origin_reference;
while (my $origin_dir = glob('config/APT_snapshots.d/*')) {
    my $origin_name = $origin_dir;
    $origin_name =~ s{\A config/APT_snapshots[.]d/}{}xms;
    $origin_reference{$origin_name} = read_file("$origin_dir/serial");
    chomp $origin_reference{$origin_name};
    $data->{origin_references}->{ $origin_name }->{reference} = $origin_reference{ $origin_name } || 'unknown';
}

my $yaml = Dump $data;
write_file($manifest, $yaml);
