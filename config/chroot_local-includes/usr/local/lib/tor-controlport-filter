#!/usr/bin/python3

# This filter proxy allows fine-grained access whitelists of commands
# (and their argunents) and events on a per-application basis, stored
# in:
#
#     /etc/tor-controlport-filter.d/
#
# who are pretty self-explanatory as long as you understand the Tor
# ControlPort language. The format is based on YAML where the
# top-level is supposed to be a list, where each element is a
# dictionary looking something like this:
#
#     - match-exe-paths:
#         - path_to_executable
#         ...
#       match-users:
#         - user
#         ...
#       match-hosts:
#         - host
#         ...
#       commands:
#         command:
#           - command_arg_rule
#           ...
#         ...
#       events:
#         event:
#           event_option: event_option_value
#           ...
#         ...
#
# A filter is matched if for each of the relevant `match-*` rules at
# least one of the elements match the client. For local (loopback)
# clients the following match rules are needed:
#
# * `match-exe-paths`: a list of strings, each describing the path to
#   the binary or script of the client with `*` matching
#   anything. While this matcher always works for binaries, it only
#   works for scripts with an enabled AppArmor profile (not
#   necessarily enforced, complain mode is good enough).
#
# * `match-users`: a list of strings, each describing the user of the
#   client with `*` matching anything.
#
# For remote (non-local) clients, the following match rules are
# needed:
#
# * match-hosts: a list of strings, each describing the IPv4 address
#   of the client with `*` matching anything.
#
# A filter can serve both local and remote clients by having all
# `match-*` rules.  A client can match several filters, resulting in
# the union of the access rights of all matched filters (exceptions
# are described for each option).
#
# `commands` (optional) is a list where each item is a dictionary with
# the obligatory `pattern` key, which is a regular expression that is
# matched against the full argument part of the command. The default
# behavior is to just proxy the line through if matched, but it can be
# altered with these keys:
#
# * `replacement`: this rewrites the arguments. The value is a Python
#   format string (str.format()) which will be given the match groups
#   from the match of `pattern`, and can referred to by position
#   starting from 1. The rewritten rule is then proxied without the
#   need to match any rule.
#
# * `response`: instead of proxying the command, just respond with
#   this static string to the client.
#
# If a simple regex (as string) is given, it is assumed to be the
# `pattern` which allows a short-hand for this common type of rule.
#
# Note that to allow a command to be run without arguments, the empty
# string must be explicitly given as a `pattern`. Hence, an empty
# argument list does not allow any use of the command.
#
# `events` (optional) is a dictionary where the key represents the
# event. If a key exists the event is allowed. The valie is another
# dictionary of options:
#
# * `suppress`: a boolean determining whether we should just fool the
#   client that it has subscribed to the event (i.e. the client
#   request is not filtered) while we suppress them.
#
# Note that two matched filters setting some event's option
# differently will cause a runtime error.
#
# `restrict-stream-events` (optional) is a boolean, and if set any
# STREAM events sent to the client (after it has subscribed to them)
# will be restricted to those belonging to the client itself. This
# option only works for local clients, and a runtime error will occur
# for remote clients.

import argparse
import glob
import ipaddress
import os.path
import psutil
import re
import socketserver
import stem
import stem.control
import sys
import yaml

DEFAULT_LISTEN_ADDRESS = 'localhost'
DEFAULT_LISTEN_PORT = 9051
DEFAULT_COOKIE_PATH = '/var/run/tor/control.authcookie'
DEFAULT_CONTROL_SOCKET_PATH = '/var/run/tor/control'

# Limit the length of a line, to prevent DoS attacks trying to
# crash this filter proxy by sending infinitely long lines.
MAX_LINESIZE = 1024


def log(msg):
    print(msg, file=sys.stderr)
    sys.stderr.flush()


def pid_of_laddr(address):
    try:
        return next(conn for conn in psutil.net_connections() \
                    if conn.laddr == address).pid
    except StopIteration:
        return None


def exe_path_of_pid(pid):
    # Here we leverage AppArmor's in-kernel solution for determining
    # the exact executable invoked. Looking at /proc/pid/exe when an
    # interpreted script is running will just point to the
    # interpreter's binary, which is not fine-grained enough, but
    # AppArmor will be aware of which script is running for processes
    # using one of its profiles. However, we fallback to /proc/pid/exe
    # in case there is no AppArmor profile, so the only unsupported
    # mode here is unconfined scripts.
    enabled_aa_profile_re = r'^(/.+) \((?:complain|enforce)\)$'
    with open('/proc/{}/attr/current'.format(str(pid)), "rb") as fh:
        aa_profile_status = str(fh.read().strip(), 'UTF-8')
        exe_path_match = re.match(enabled_aa_profile_re, aa_profile_status)
        if exe_path_match:
            return exe_path_match.group(1)
        else:
            return psutil.Process(pid).exe()


def handle_controlport_session(controller, readh, writeh, allowed_commands, allowed_events, client_desc, client_pid, restrict_stream_events = False):

    def debug_log_helper(direction, line):
        line = line.strip()
        if "\n" in line:
            line = "multi-line:\n" + line
        log("{} {} {}".format(client_desc, direction, line))

    def debug_log_send(line):
        if global_args.print_responses:
            debug_log_helper('<-', line)

    def debug_log_recv(line):
        if global_args.print_requests:
            debug_log_helper('->', line)

    def respond(line, raw=False):
        debug_log_send(line)
        writeh.write(bytes(line, 'ascii'))
        if not raw: writeh.write(bytes("\r\n", 'ascii'))
        writeh.flush()

    def get_rule(line):
        cmd, _, args = line.partition(' ')
        cmd = cmd.upper()
        allowed_args = allowed_commands.get(cmd, [])
        return next((rule for rule in allowed_args \
                     if re.match(rule['pattern'] + "$", args)), None)

    def is_line_allowed(line):
        if global_args.disable_filtering: return True
        return bool(get_rule(line))

    def proxy_line(line):
        response = controller.msg(line)
        respond(response.raw_content(), raw=True)

    def filter_line(line):
        log("Command filtered: {}".format(line))
        respond("510 Command filtered")

    def rewrite_args_in_line(pattern, replacement, line):
        # We also want to match the command in `line`...
        pattern = r'^(\S+)\s+' + pattern
        replacement = "{} " + replacement
        match = re.match(pattern + "$", line)
        if not match: return None
        # ... and add it back to the replacement string.
        return replacement.format(*match.groups())

    def event_cb(event):
        if restrict_stream_events and \
           isinstance(event, stem.response.events.StreamEvent) and \
           not global_args.disable_filtering:
            if event.id not in client_streams:
                if event.status in [stem.StreamStatus.NEW,
                                    stem.StreamStatus.NEWRESOLVE] and \
                   client_pid == pid_of_laddr((event.source_address,
                                               event.source_port)):
                    client_streams.add(event.id)
                else:
                    return
            elif event.status in [stem.StreamStatus.FAILED,
                                  stem.StreamStatus.CLOSED]:
                client_streams.remove(event.id)
        respond(event.raw_content(), raw=True)

    subscribed_event_listeners = []
    client_streams = set()

    while True:
        line = str(readh.readline(MAX_LINESIZE), 'ascii').strip()

        if not line: break
        debug_log_recv(line)

        # This regex makes us split on unquoted whitespaces.
        cmd, *args = re.findall(r'(?:[^\s,"]|"(?:\\.|[^"])*")+', line)
        cmd = cmd.upper()

        # Check what it is
        if cmd == "PROTOCOLINFO":
            # Stem call PROTOCOLINFO before authenticating. Tell the
            # client that there is no authentication.
            respond("250-PROTOCOLINFO 1")
            respond("250-AUTH METHODS=NULL")
            respond("250-VERSION Tor=\"{}\"".format(controller.get_version()))
            respond("250 OK")

        elif cmd == "AUTHENTICATE":
            # We have already authenticated, and the filtered port is
            # access-restricted according to our filter instead.
            respond("250 OK")

        elif cmd == "QUIT":
            respond("250 closing connection")
            break

        elif cmd == "SETEVENTS":
            # The control language doesn't care about case for
            # the event type.
            events = [event.upper() for event in args]
            if not global_args.disable_filtering and \
               any(event not in allowed_events for event in events):
                filter_line(line)
                continue
            for listener in subscribed_event_listeners:
                controller.remove_event_listener(listener)
            subscribed_event_listeners = []
            for event in events:
                rule = allowed_events[event] or {}
                if not rule.get('suppress', False) or \
                   global_args.disable_filtering:
                    event_cb_instance = lambda event: event_cb(event)
                    controller.add_event_listener(
                        event_cb_instance, getattr(stem.control.EventType, event)
                    )
                    subscribed_event_listeners.append(event_cb_instance)
            respond("250 OK")

        # SETCONF can take multiple assignments, but let's allow
        # listing them individually in the filter file.
        elif cmd == "SETCONF":
            if all(is_line_allowed("SETCONF {}".format(arg)) for arg in args):
                proxy_line(line)
            else:
                filter_line(line)

        else:
            rule = get_rule(line)
            if rule:
                if 'replacement' in rule:
                    new_line = rewrite_args_in_line(
                        rule['pattern'], rule['replacement'], line
                    )
                    proxy_line(new_line)
                elif 'response' in rule:
                    respond(rule['response'])
                else:
                    proxy_line(line)
            else:
                filter_line(line)


class FilteredControlPortProxyHandler(socketserver.StreamRequestHandler):

    def setup(self):
        super(type(self), self).setup()
        self.filters = []
        for filter_file in glob.glob('/etc/tor-controlport-filter.d/*.yml'):
            with open(filter_file, "rb") as fh:
                filters = yaml.load(fh.read())
                name = re.sub(r'\.yml$', '', os.path.basename(filter_file))
                for filter_ in filters:
                    filter_['name'] = name
                self.filters += filters

    def connect_to_real_control_port(self):
        # Read authentication cookie
        with open(global_args.control_cookie_path, "rb") as f:
            cookie = f.read(32)

        # Connect to the real control port
        controller = stem.control.Controller.from_socket_file(
            global_args.control_socket_path
        )
        controller.authenticate(cookie)

        return controller

    def handle(self):
        client_host = self.client_address[0]
        local_connection = ipaddress.ip_address(client_host).is_loopback
        if local_connection:
            client_pid = pid_of_laddr(self.client_address)
            # Deal with the race between looking up the PID, and the
            # client being killed before we find the PID.
            if not client_pid: return
            client_exe_path = exe_path_of_pid(client_pid)
            client_user = psutil.Process(client_pid).username()
        else:
            client_pid = None
            client_exe_path = ''
            client_user = ''
        restrict_stream_events = False
        matched_filters = []
        allowed_commands = {}
        allowed_events = {}
        for filter_ in self.filters:
            is_ok = True
            if local_connection:
                matchers = [
                    ('match-exe-paths', client_exe_path),
                    ('match-users',     client_user),
                ]
            else:
                matchers = [
                    ('match-hosts', client_host),
                ]
            for key, expected_val in matchers:
                if key not in filter_ or \
                   not any(val for val in filter_[key] \
                           if expected_val == val or val == '*'):
                    is_ok = False
                    break
            if is_ok:
                # Instead of a simple dict.update(), which would
                # overwrite existing values (i.e. the argument
                # list from a previous filter) we merge the values
                # in place, to combine multiple matched filters
                # without loss.
                if 'commands' in filter_:
                    for cmd in filter_['commands']:
                        new_rules = filter_['commands'][cmd]
                        cmd = cmd.upper()
                        old_rules = allowed_commands.get(cmd, [])
                        # Allow "simple" matching rules where the
                        # 'pattern' key is implicit.
                        for i in range(len(new_rules)):
                            rule = new_rules[i]
                            if isinstance(rule, str):
                                new_rules[i] = {'pattern': rule}
                        allowed_commands[cmd] = old_rules + new_rules
                # Similarly, we don't use dict.update(), and instead
                # verify that no two matching filters set some option
                # for the same stream differently, cause then the
                # order of how the filters are matched would matter.
                if 'events' in filter_:
                    for event in filter_['events']:
                        new_opts = filter_['events'][event]
                        event = event.upper()
                        old_opts = allowed_events.get(event, None)
                        if old_opts != None and new_opts != None and \
                           any(old_opts.get(k, new_opts[k]) != new_opts[k] \
                               for k in new_opts):
                            raise RuntimeError(
                                "Filter '{}' tried to set some option of " +
                                "event `{}` that some other filter already " +
                                "has set differently"
                                .format(filter_['name'], event)
                            )
                        allowed_events[event] = new_opts
                matched_filters.append(filter_['name'])
                if filter_.get('restrict-stream-events', False):
                    if not local_connection:
                        raise RuntimeError(
                            "Filter '{}' has `restrict-stream-events` set " +
                            "but the client '{}:{}' is not local"
                            .format(filter_['name'], *self.client_address)
                        )
                    restrict_stream_events = True
        if matched_filters == []:
            status = 'no matching filter found, using an empty one'
        else:
            status = 'loaded filter(s): {}'.format(", ".join(matched_filters))
        if local_connection:
            client_desc = '{} (pid: {}, user: {})'.format(
                client_exe_path, client_pid, client_user
            )
        else:
            client_desc = '{}:{}'.format(*self.client_address)
        log('{} connected: {}'.format(client_desc, status))
        if global_args.debug:
            log('Merged rules:')
            log(yaml.dump({
                'commands': allowed_commands,
                'events': allowed_events,
                'restrict-stream-events': restrict_stream_events,
            }))
        controller = self.connect_to_real_control_port()
        disconnect_reason = "client quit"
        try:
            handle_controlport_session(controller, self.rfile, self.wfile,
                                       allowed_commands, allowed_events,
                                       client_desc, client_pid,
                                       restrict_stream_events
            )
        except (ConnectionResetError, BrokenPipeError) as err:
            # Handle clients disconnecting abruptly
            disconnect_reason = str(err)
        finally:
            controller.close()
            log('{} (PID: {}, user: {}) disconnected: {}'
                .format(client_exe_path, client_pid, client_user,
                        disconnect_reason)
            )


class FilteredControlPortProxy(socketserver.ThreadingTCPServer):
    # So we can restart when the listening port is in TIME_WAIT state
    # after an abrupt shutdown.
    allow_reuse_address = True
    # So all server threads immediately quit when the main thread
    # quits.
    daemon_threads = True


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "--listen-address",
        type=str, metavar='ADDR', default=DEFAULT_LISTEN_ADDRESS,
        help="specifies the address on which the server listens " +
             "(default: {})".format(DEFAULT_LISTEN_ADDRESS)
    )
    parser.add_argument(
        "--listen-port",
        type=int, metavar='PORT', default=DEFAULT_LISTEN_PORT,
        help="specifies the port on which the server listens " +
             "(default: {})".format(DEFAULT_LISTEN_PORT)
    )
    parser.add_argument(
        "--control-cookie-path",
        type=str, metavar='PATH', default=DEFAULT_COOKIE_PATH,
        help="specifies the path to Tor's control authentication cookie " +
             "(default: {})".format(DEFAULT_COOKIE_PATH)
    )
    parser.add_argument(
        "--control-socket-path",
        type=str, metavar='PATH', default=DEFAULT_CONTROL_SOCKET_PATH,
        help="specifies the path to Tor's control socket " +
             "(default: {})".format(DEFAULT_CONTROL_SOCKET_PATH)
    )
    parser.add_argument(
        "--complain",
        action='store_true', default=False,
        help="disables all filtering and just prints the commands sent " +
             "by the client"
    )
    parser.add_argument(
        "--debug",
        action='store_true', default=False,
        help="prints all requests and responses"
    )
    # We put the argparse results in the global scope since it's
    # awkward to extend socketserver so additional data can be sent to
    # the request handler, where we need access to the arguments.
    global global_args
    global_args = parser.parse_args()
    # Deal with overlapping functionality between arguments
    global_args.__dict__['disable_filtering'] = global_args.complain
    global_args.__dict__['print_requests'] = global_args.complain or \
                                             global_args.debug
    global_args.__dict__['print_responses'] = global_args.debug
    server = FilteredControlPortProxy(
        (global_args.listen_address, global_args.listen_port),
        FilteredControlPortProxyHandler
    )
    log("Tor control port filter started, listening on {}:{}"
        .format(global_args.listen_address, global_args.listen_port)
    )
    try:
        server.serve_forever()
    except KeyboardInterrupt:
        pass


if __name__ == "__main__":
    main()
