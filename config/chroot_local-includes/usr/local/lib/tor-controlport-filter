#!/usr/bin/python3

# This filter proxy allows fine-grained access whitelists of commands
# (and their argunents) and events on a per-application basis. See the
# definitions the filter actually uses in:
#
#     /etc/tor-controlport-filter.d/
#
# which are pretty self-explanatory as long as you understand the Tor
# ControlPort language.

import argparse
import glob
import os.path
import psutil
import re
import shlex
import socketserver
import stem
import stem.control
import yaml

DEFAULT_LISTEN_PORT = 9051
DEFAULT_COOKIE_PATH = '/var/run/tor/control.authcookie'
DEFAULT_CONTROL_SOCKET_PATH = '/var/run/tor/control'

# This will store the arguments from argparse. We put it in the global
# scope since it's awkward to extend socketserver so additional data
# can be sent to the request handler, where we need access to the
# arguments.
global_args = None

# Limit the length of a line, to prevent DoS attacks trying to
# crash this filter proxy by sending infinitely long lines.
MAX_LINESIZE = 1024

class UnexpectedAnswer(Exception):
    def __init__(self, msg):
        self.msg = msg
    def __str__(self):
        return "[UnexpectedAnswer] " + self.msg

def exe_path_of_pid(pid):
    # Here we leverage AppArmor's in-kernel solution for determining
    # the exact executable invoked. Looking at /proc/pid/exe when an
    # interpreted script is running will just point to the
    # interpreter's binary, which is not fine-grained enough, but
    # AppArmor will be aware of which script is running for processes
    # using one of its profiles. However, we fallback to /proc/pid/exe
    # in case there is no AppArmor profile, so the only unsupported
    # mode here is unconfined scripts.
    aa_mode_re = r'(?:complain|enforce)'
    enabled_aa_profile_re = r'^(/.+) \({}\)$'.format(aa_mode_re)
    with open('/proc/{}/attr/current'.format(str(pid)), "rb") as fh:
        aa_profile_status = str(fh.read().strip(), 'UTF-8')
        exe_path_match = re.match(enabled_aa_profile_re, aa_profile_status)
        if exe_path_match:
            return exe_path_match.group(1)
        else:
            return psutil.Process(pid).exe()


def handle_controlport_session(controller, readh, writeh, allowed_commands, allowed_events):
    def respond(line, raw = False):
        writeh.write(bytes(line, 'ascii'))
        if not raw: writeh.write(bytes("\r\n", 'ascii'))
        writeh.flush()

    def is_line_allowed(line):
        if global_args.complain: return True
        cmd, _, args = line.partition(' ')
        cmd = cmd.upper()
        allowed_args = allowed_commands.get(cmd, [])
        return any(re.match(regex + "$", args) for regex in allowed_args)

    def proxy_line(line):
        if global_args.complain: print("-> {}".format(line))
        response = controller.msg(line)
        respond(response.raw_content(), raw = True)

    def filter_line(line):
        print("Command filtered: {}".format(line))
        respond("510 Command filtered")

    subscribed_event_listeners = []

    while True:
        line = str(readh.readline(MAX_LINESIZE), 'ascii').strip()

        if not line: break

        def line_matches_command(cmd):
            # The control port language does not care about case for
            # commands.
            return re.match(r"^%s\b" % cmd, line, re.IGNORECASE)

        # Check what it is
        if line_matches_command("PROTOCOLINFO"):
            # Stem call PROTOCOLINFO before authenticating. Tell the
            # client that there is no authentication.
            respond("250-PROTOCOLINFO 1")
            respond("250-AUTH METHODS=NULL")
            respond("250-VERSION Tor=\"{}\"".format(controller.get_version()))
            respond("250 OK")

        elif line_matches_command("AUTHENTICATE"):
            # We have already authenticated, and the filtered port is
            # access-restricted to the allowed users via the firewall.
            respond("250 OK")

        elif line_matches_command("QUIT"):
            respond("250 closing connection")
            break

        # The client will be fooled that it is subscribing to all
        # events it requested, but we will only let through allowed
        # events.
        elif line_matches_command("SETEVENTS") and not global_args.complain:
            events = line.split(' ')[1:]
            if len(events) > 0:
                for event in events:
                    # The control language doesn't care about case for
                    # the event type.
                    event = event.upper()
                    if event in allowed_events:
                        def event_cb(event):
                            respond(event.raw_content(), raw = True)
                        controller.add_event_listener(
                            event_cb, getattr(stem.control.EventType, event)
                        )
                        subscribed_event_listeners.append(event_cb)
                respond("250 OK")
            else:
                for listener in subscribed_event_listeners:
                    controller.remove_event_listener(listener)
                subscribed_event_listeners = []
                respond("250 OK")

        # SETCONF can take multiple assignments, but let's allow
        # listing them individually in the filter file.
        elif line_matches_command("SETCONF"):
            all_args_ok = True
            for arg in shlex.split(line)[1:]:
                if re.search(r'\s', arg):
                    # Restore the quotes that shlex munched.
                    k, _, v = arg.partition('=')
                    arg = '{}="{}"'.format(k, v)
                if not is_line_allowed("SETCONF {}".format(arg)):
                    all_args_ok = False
                    break
            if all_args_ok:
                proxy_line(line)
            else:
                filter_line(line)

        else:
            if is_line_allowed(line):
                proxy_line(line)
            else:
                filter_line(line)


class FilteredControlPortProxyHandler(socketserver.StreamRequestHandler):

    def setup(self):
        super(type(self), self).setup()
        self.filters = []
        for filter_file in glob.glob('/etc/tor-controlport-filter.d/*.yml'):
            with open(filter_file, "rb") as fh:
                filter = yaml.load(fh.read())
                name = re.sub('\.yml$', '', os.path.basename(filter_file))
                filter[0]['name'] = name
                self.filters += filter

    def connect_to_real_control_port(self):
        # Read authentication cookie
        with open(global_args.control_cookie_path, "rb") as f:
            cookie = f.read(32)

        # Connect to the real control port
        controller = stem.control.Controller.from_socket_file(
            global_args.control_socket_path
        )
        try:
            controller.authenticate(cookie)
        except stem.SocketError:
            raise UnexpectedAnswer("AUTHENTICATE failed")

        return controller

    def handle(self):
        try:
            client_conn = \
                next(conn for conn in psutil.net_connections() \
                    if conn.laddr == self.client_address)
        except StopIteration:
            # Deal with the race between looking up the PID, and the
            # client being killed before we find the PID.
            return
        client_exe_path = exe_path_of_pid(client_conn.pid)
        client_user = psutil.Process(client_conn.pid).username()
        matched_filters = []
        allowed_commands = {}
        allowed_events = []
        for filter in self.filters:
            is_ok = True
            matchers = [
                ('match-exe-paths', client_exe_path),
                ('match-users', client_user),
            ]
            for key, expected_val in matchers:
                if not key in filter:
                    is_ok = False
                    print("Filter '{}' lacks obligatory key '{}': skipping"
                          .format(filter['name'], key)
                    )
                    break
                if not any(val for val in filter[key] \
                           if expected_val == val or val == '*'):
                    is_ok = False
                    break
            if is_ok:
                if 'commands' in filter:
                    # Instead of a simple dict.update(), which would
                    # overwrite existing values (i.e. the argument
                    # list from a previous filter) we merge the values
                    # in place, to combine multiple matched filters
                    # without loss.
                    for key in filter['commands']:
                        old = allowed_commands.get(key, [])
                        new = filter['commands'][key]
                        allowed_commands[key] = old + new
                allowed_events += filter.get('events', [])
                matched_filters.append(filter['name'])
        if matched_filters == []:
            status = 'no matching filter found, using an empty one'
        else:
            status = 'loaded filter(s): {}'.format(", ".join(matched_filters))
        print('{} (PID: {}, user: {}) connected: {}'
              .format(client_exe_path, client_conn.pid, client_user, status)
        )
        controller = self.connect_to_real_control_port()
        try:
            handle_controlport_session(controller, self.rfile, self.wfile,
                                       allowed_commands, allowed_events)
        finally:
            controller.close()


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "-p", "--listen-port",
        type = int, metavar = 'PORT', default = DEFAULT_LISTEN_PORT,
        help = "specifies the port on which the server listens " +
               "(default: {})".format(DEFAULT_LISTEN_PORT))
    parser.add_argument(
        "-c", "--control-cookie-path",
        type = str, metavar = 'PATH', default = DEFAULT_COOKIE_PATH,
        help = "specifies the path to Tor's control authentication cookie " +
               "(default: {})".format(DEFAULT_COOKIE_PATH))
    parser.add_argument(
        "-s", "--control-socket-path",
        type = str, metavar = 'PATH', default = DEFAULT_CONTROL_SOCKET_PATH,
        help = "specifies the path to Tor's control socket " +
               "(default: {})".format(DEFAULT_CONTROL_SOCKET_PATH))
    parser.add_argument(
        "--complain",
        action = 'store_true', default = False,
        help = "disables all filtering and just prints the commands sent " +
               "by the client")
    global global_args
    global_args = parser.parse_args()
    server = socketserver.ThreadingTCPServer(
        ("localhost", global_args.listen_port),
        FilteredControlPortProxyHandler
    )
    print("Tor control port filter started, listening on {}"
          .format(global_args.listen_port))
    server.serve_forever()


if __name__ == "__main__":
    main()
