#!/usr/bin/python3

# Tor control port filter proxy, only white-listing SIGNAL NEWNYM,
# ADD_ONION, and DEL_ONION.

# This filter proxy should allow Torbutton to request a
# new Tor circuit, without exposing dangerous control requests
# like "GETINFO address" to applications running as a local user.

# If something goes wrong, an error code is returned, and
# Torbutton will display a warning dialog that New Identity failed.

# This filter proxy also allows software like OnionShare or Ricochet
# to add and delete ephermeral hidden services.

import socketserver
import re

from stem.control import Controller, EventType
from stem import Signal, SocketError, InvalidArguments, ProtocolError

# Limit the length of a line, to prevent DoS attacks trying to
# crash this filter proxy by sending infinitely long lines.
MAX_LINESIZE = 128

class UnexpectedAnswer(Exception):
    def __init__(self, msg):
        self.msg = msg
    def __str__(self):
        return "[UnexpectedAnswer] " + self.msg

def handle_controlport_session(controller, readh, writeh):
    def respond(line):
        writeh.write(bytes(line, 'ascii'))
        writeh.flush()

    subscribed_event_listeners = []

    # Keep accepting commands
    while True:
        # Read in a newline terminated line
        line = str(readh.readline(MAX_LINESIZE), 'ascii')

        if not line: break

        def line_matches_command(cmd):
            # The control port language does not care about case
            # for commands.
            return re.match(r"^%s\b" % cmd, line, re.IGNORECASE)

        # Check what it is
        if line_matches_command("PROTOCOLINFO"):
            # Stem call PROTOCOLINFO before authenticating
            # Tell the client that there is no authentication
            respond("250-PROTOCOLINFO 1\r\n")
            respond("250-AUTH METHODS=NULL\r\n")
            respond("250-VERSION Tor=\"{}\"\r\n".format(controller.get_version()))
            respond("250 OK\r\n")

        elif line_matches_command("AUTHENTICATE"):
            # Don't check authentication, since only
            # safe commands are allowed
            respond("250 OK\r\n")

        elif line_matches_command("GETINFO version"):
            # Stem calls "GETINFO version" in the create_ephemeral_hidden_service function
            respond("250-version={}\r\n".format(controller.get_version()))
            respond("250 OK\r\n")

        elif line_matches_command("GETINFO onions/current"):
            # This lists ephemeral hidden services, made during the current control port connection
            # Send GETINFO onions/current
            try:
                onions = controller.list_ephemeral_hidden_services()
            except InvalidArguments:
                respond("510 GETINFO onions/current failed\r\n")
                raise UnexpectedAnswer("GETINFO onions/current failed")

            if len(onions) == 0:
                respond("551 No onion services of the specified type.\r\n")
            elif len(onions) == 1:
                respond("250-onions/current={}\r\n".format(onions[0]))
                respond("250 OK\r\n")
            else:
                respond("250+onions/current=\r\n")
                for onion in onions:
                    respond("{}\r\n".format(onion))
                respond(".\r\n")
                respond("250 OK\r\n")

            print("GETINFO onions/current went fine")

        elif line_matches_command("SIGNAL NEWNYM"):
            # Perform a real SIGNAL NEWNYM (new Tor circuit)
            try:
                controller.signal(Signal.NEWNYM)
            except InvalidArguments:
                respond("510 NEWNYM signal failed\r\n")
                raise UnexpectedAnswer("NEWNYM signal failed")

            respond("250 OK\r\n")
            print("NEWNYM went fine")

        elif line_matches_command("ADD_ONION"):
            # Perform a real ADD_ONION (new ephemeral hidden service)

            # example: ADD_ONION NEW:BEST Port=80,8080
            parts = line.split(' ')         # ['ADD_ONION', 'NEW:BEST', 'Port=80,8080']

            key_parts = parts[1].split(':') # ['NEW', 'BEST']
            key_type = key_parts[0]         # 'NEW'
            key_content = key_parts[1]      # 'BEST'

            port_parts = parts[2].split('=')[1].split(',')     # ['80','8080']
            ports = { int(port_parts[0]): int(port_parts[1]) } # { 80: 8080 }

            # Send ADD_ONION
            try:
                res = controller.create_ephemeral_hidden_service(ports, key_type, key_content, await_publication = True)
            except InvalidArguments:
                respond("510 ADD_ONION signal failed\n")
                raise UnexpectedAnswer("ADD_ONION failed")
            respond(res.raw_content())
            print("ADD_ONION went fine")

        elif line_matches_command("DEL_ONION"):
            # Perform a real DEL_ONION (delete ephemeral hidden service)

            # example: DEL_ONION ho2fw3hol6q5hehh
            service_id = line.split(' ')[1].strip()

            try:
                controller.remove_ephemeral_hidden_service(service_id)
            except ProtocolError:
                respond("510 DEL_ONION signal failed\r\n")
                raise UnexpectedAnswer("DEL_ONION failed")

            respond("250 OK\r\n")
            print("DEL_ONION went fine")

        elif line_matches_command("QUIT"):
            # Quit session
            respond("250 Closing connection\r\n")
            break

        elif line_matches_command("SETEVENTS HS_DESC"):
            def event_cb(event):
                respond(event.raw_content())
            controller.add_event_listener(event_cb, EventType.HS_DESC)
            subscribed_event_listeners.append(event_cb)
            respond("250 OK\r\n")

        elif line.strip() == "SETEVENTS":
            for listener in subscribed_event_listeners:
                controller.remove_event_listener(listener)
            subscribed_event_listeners = []
            respond("250 OK\r\n")

        else:
            # Everything else we ignore/block
            respond("510 Command filtered\r\n")


class FilteredControlPortProxyHandler(socketserver.StreamRequestHandler):

    def connect_to_real_control_port(self):
        # Read authentication cookie
        with open("/var/run/tor/control.authcookie", "rb") as f:
            cookie = f.read(32)

        # Connect to the real control port
        controller = Controller.from_socket_file("/var/run/tor/control")
        try:
            controller.authenticate(cookie)
        except SocketError:
            raise UnexpectedAnswer("AUTHENTICATE failed")

        return controller

    def handle(self):
        controller = self.connect_to_real_control_port()
        try:
            handle_controlport_session(controller, self.rfile, self.wfile)
        finally:
            controller.close()


def main():
    listen_port = 9052
    server = socketserver.ThreadingTCPServer(("localhost", listen_port),
                                             FilteredControlPortProxyHandler)
    print("Tor control port filter started, listening on %d" % listen_port)
    try:
        server.serve_forever()
    finally:
        server.server_close()


if __name__ == "__main__":
    main()
