#!/usr/bin/env python3

import sys
import os
import logging
import logging.handlers
import contextlib

from tails_server import argument_parser
from tails_server import util
from tails_server import import_services
from tails_server.config import OPTIONS_FILE_NAME


def list_services():
    for service in import_services.service_names:
        print("-", service)


def list_enabled():
    enabled_services = [service for service in import_services.services if service.is_running]
    for service in enabled_services:
        print("-", service.name)


@contextlib.contextmanager
def use_persistent_options_file_if_exists(service):
    persistent_options_file = os.path.join(service.persistence_dir, OPTIONS_FILE_NAME)
    if os.path.exists(persistent_options_file):
        logging.debug("Using persistent options file %r", persistent_options_file)
        service.options_file = persistent_options_file
    yield service
    service.options_file = os.path.join(service.state_dir, OPTIONS_FILE_NAME)


def restore_services():
    """Install packages and restore files of services which have the 'persistence' option set to
    True"""
    persistent_services = list()
    for service in import_services.services:
        with use_persistent_options_file_if_exists(service):
            if "persistence" in service.options_dict and service.options_dict["persistence"].value:
                persistent_services.append(service)

    for service in persistent_services:
        service.restore()


def autostart_services():
    """Start services with the autostart option set to True"""
    services_to_autostart = [
        service for service in import_services.services
        if "autostart" in service.options_dict and service.options_dict["autostart"].value
    ]
    for service in services_to_autostart:
        logging.info("Starting service %r", service.name)
        util.run_threaded(service.enable)


def init(args):
    logger = logging.getLogger()
    logger.setLevel(0)
    logger.propagate = 0

    if not args.verbose:
        level = logging.INFO
    elif args.verbose == 1:
        level = logging.DEBUG
    else:
        level = 0
    if args.log_file:
        file_handler = logging.handlers.RotatingFileHandler(args.log_file, mode="w")
        file_handler.setLevel(logging.DEBUG)
        format_ = "%(asctime)s %(name)s[%(process)d]: %(levelname)s - %(message)s"
        file_handler.setFormatter(logging.Formatter(format_))
        logger.addHandler(file_handler)

    console_handler = logging.StreamHandler()
    console_handler.setLevel(level)
    format_ = "%(name)s:%(levelname)s: %(message)s"
    console_handler.setFormatter(logging.Formatter(format_))
    logger.addHandler(console_handler)

    logging.getLogger('stem').setLevel(level+5)
    logging.getLogger('sh').setLevel(level+5)
    logging.debug("args: %r", args)


def exec_service_command(args):
    service_module = import_services.service_modules_dict[args.SERVICE]
    service = service_module.service_class()

    # Delete service name from arguments
    del sys.argv[-1]

    # args = service.arg_parser.parse_args()
    dispatch_service_command(service, args)


def dispatch_service_command(service, args):
        if args.command == "info":
            return service.print_info(detailed=args.details)
        elif args.command == "status":
            return service.print_status()
        elif args.command == "install":
            return service.install()
        elif args.command == "uninstall":
            return service.uninstall()
        elif args.command == "enable":
            return service.enable()
        elif args.command == "disable":
            return service.disable()
        elif args.command == "get-option":
            return service.get_option(args.OPTION)
        elif args.command == "set-option":
            return service.set_option(args.OPTION, args.VALUE)
        elif args.command == "reset-option":
            return service.reset_option(args.OPTION)


def main():
    args = argument_parser.CommandParser().parse_args()
    init(args)

    if args.command == "list":
        list_services()
    elif args.command == "list-enabled":
        list_enabled()
    elif args.command == "restore":
        restore_services()
    elif args.command == "autostart":
        autostart_services()
    else:
        if os.geteuid() != 0:
            exit("This command requires root")
        exec_service_command(args)


if __name__ == "__main__":
    main()
