#!/bin/sh

set -e
set -u

# Save stdout in a new fd so we can restore it later, and until then
# redirect stdout to stderr.
exec 3<&1
exec 1>&2

# Ad-hoc option handling
for arg in "${@}"; do
    case "${arg}" in
        --listen-on-lan) LISTEN_ON_LAN=yes ;;
        --quit) exec systemctl stop mumble-server ;;
        --help) echo "Options: --listen-on-lan, --quit"; exit 0 ;;
        *) echo "error: invalid option: ${arg}" >&2; exit 1 ;;
    esac
done

SERVER_CONFIG=/etc/mumble-server.ini
SERVER_PORT=64738

# We're forced to use a little bind-mount trick to keep both the
# mumble server data and Tor hidden service data in the same
# persistent source folder. Remember, we're constrained by Tor's
# AppArmor profile (so it cannot access things outside of its data
# dir, essentially), and we want strict permissions so neither user
# can access the other user's data.
SHARED_DIR=/var/lib/tor/mumble-server
SERVER_DIR="${SHARED_DIR}/server-data"
HS_DIR="${SHARED_DIR}/hs"
install -o debian-tor -g debian-tor -m 700 -d "${SHARED_DIR}"
install -o debian-tor -g debian-tor -m 700 -d "${HS_DIR}"
install -o mumble-server -g mumble-server -m 700 -d "${SERVER_DIR}"
# This works around the permissions of the parent directory --
# otherwise mumble-server cannot access this directory.
grep -q "^\S\+\s\+/var/lib/mumble-server\s" /proc/mounts || \
    mount --bind "${SERVER_DIR}" /var/lib/mumble-server

# Generate persistent password for Mumble server
[ -f "${SERVER_DIR}/password" ] || pwgen 32 1 > "${SERVER_DIR}/password"
PASSWORD="$(cat "${SERVER_DIR}/password")"

# Configure mumble-server
sed -i "s%^serverpassword=$%serverpassword=${PASSWORD}%" "${SERVER_CONFIG}"
if [ -n "${LISTEN_ON_LAN:-}" ]; then
    sed -i "s%^host=%#host=%" "${SERVER_CONFIG}"
else
    sed -i "s%^#host=$%host=127.0.0.1%" "${SERVER_CONFIG}"
fi

# Extract fingerprint from SQLite database
systemctl start mumble-server # To generate the database
systemctl stop  mumble-server # To unlock database

FINGERPRINT="$(sqlite3 "${SERVER_DIR}/mumble-server.sqlite" "select value from config where key = 'certificate';" | openssl x509 -fingerprint | head -n 1 | cut -d '=' -f 2)"

# Configure Tor hidden service
install -o debian-tor -g debian-tor -m 700 -d "${HS_DIR}"
install -o debian-tor -g debian-tor -m 700 -d "${HS_DIR}/mumble-server"

grep --quiet "^HiddenServiceDir ${HS_DIR}$" /etc/tor/torrc || \
    echo "HiddenServiceDir ${HS_DIR}" >> /etc/tor/torrc
grep --quiet "^HiddenServicePort ${SERVER_PORT}$" /etc/tor/torrc || \
    echo "HiddenServicePort ${SERVER_PORT}" >> /etc/tor/torrc

# Restart Tor and Mumble server
systemctl start mumble-server
systemctl reload tor@default

until [ -e "${HS_DIR}/hostname" ]; do
    inotifywait --timeout 5 --event create "${HS_DIR}" || :
done
HOSTNAME="$(cat "${HS_DIR}/hostname")"

# Drop previous mumble-server firewall exceptions
systemctl reload ferm

# Allow local connections
iptables -I OUTPUT --out-interface lo --protocol tcp \
         --dport "${SERVER_PORT}" --jump ACCEPT

# Allow LAN connections if requested
if [ -n "${LISTEN_ON_LAN:-}" ]; then
    for range in 10.0.0.0/8 172.16.0.0/12 192.168.0.0/16; do
        for proto in tcp udp; do
            iptables -A INPUT --source "${range}" --protocol "${proto}" \
                     --dport "${SERVER_PORT}" --jump ACCEPT
        done
    done
fi

# Restore stdout -- we have now guaranteed that the only thing we'll
# write to stdout is the information below.
exec 1<&3 3<&-

# Output connection information
echo "Hostname:	${HOSTNAME}"
echo "Fingerprint:	${FINGERPRINT}"
echo "Password:	${PASSWORD}"
echo "Mumble URI:	mumble://nickname:${PASSWORD}@${HOSTNAME}"
