#!/usr/bin/env python3

import subprocess
import time
import dbus
import socket

from tails_screen_locker import set_password_dialog


def main():
    get_lock()
    if not is_password_set():
        set_password()
        # TODO: Remove this once this is fixed: https://bugzilla.gnome.org/show_bug.cgi?id=761969
        time.sleep(2)
    lock_screen()


def get_lock():
    # Source: https://stackoverflow.com/a/7758075
    # Original author: https://stackoverflow.com/users/639295/aychedee
    # Without holding a reference to our socket somewhere it gets garbage
    # collected when the function exits
    get_lock._lock_socket = socket.socket(socket.AF_UNIX, socket.SOCK_DGRAM)
    get_lock._lock_socket.bind('\0' + 'tails-screen-locker')


def is_password_set():
    output = subprocess.check_output(["passwd", "--status"])
    return output.split()[1] == b"P"


def set_password():
    pw = set_password_dialog.get_password()
    if not pw:
        raise RuntimeError("set_password_dialog returned no password")
    pw = pw.encode('ascii')
    p = subprocess.Popen("passwd", stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    p.stdin.write(pw + b"\n")
    p.stdin.write(pw)
    p.stdin.flush()
    out, err = p.communicate()
    if p.returncode != 0:
        print("passwd stdout: %s" % out)
        print("passwd stderr: %s" % err)
        raise RuntimeError("passwd returned %r", p.returncode)


def lock_screen():
    bus = dbus.SessionBus()
    proxy = bus.get_object("org.gnome.ScreenSaver", "/org/gnome/ScreenSaver")
    iface = dbus.Interface(proxy, "org.gnome.ScreenSaver")
    iface.Lock()


if __name__ == "__main__":
    main()
