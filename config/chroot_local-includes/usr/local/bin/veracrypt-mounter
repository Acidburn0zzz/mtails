#!/usr/bin/env python3

import argparse
import logging
import signal
import os

import gi
gi.require_version('Gtk', '3.0')
gi.require_version('UDisks', '2.0')
gi.require_version('GUdev', '1.0')
from gi.repository import Gtk, Gio, GLib, UDisks

from veracrypt_mounter import _
from veracrypt_mounter.config import APP_NAME, MAIN_UI_FILE
from veracrypt_mounter.volume_manager import ContainerManager, DeviceManager


logger = logging.getLogger(__name__)


class Window(object):
    def __init__(self):
        self.udisks_client = UDisks.Client.new_sync()
        self.udisks_manager = self.udisks_client.get_manager()
        self.gio_volume_manager = Gio.VolumeMonitor.get()
        self.gio_volume_manager.connect("volume-changed", self.on_volume_changed)
        self.gio_volume_manager.connect("volume-added", self.on_volume_added)

        self.builder = Gtk.Builder()
        self.builder.set_translation_domain(APP_NAME)
        self.builder.add_from_file(MAIN_UI_FILE)
        self.builder.connect_signals(self)

        self.containers_list_box = self.builder.get_object("containers_list_box")
        self.containers_list_box.set_header_func(self.listbox_header_func)
        self.device_list_box = self.builder.get_object("device_list_box")
        self.device_list_box.set_header_func(self.listbox_header_func)

        self.container_manager = ContainerManager(self.containers_list_box, self.udisks_client)
        self.device_manager = DeviceManager(self.device_list_box, self.udisks_client)
        self.refresh_volume_lists()

        self.window = self.builder.get_object("window")
        self.window.set_title("VeraCrypt Mounter")
        self.window.connect("delete-event", Gtk.main_quit)
        logger.debug("showing window")
        self.window.show_all()

    @staticmethod
    def listbox_header_func(row, before, data=None):
        if not before:
            return
        separator = Gtk.Separator(orientation=Gtk.Orientation.HORIZONTAL)
        row.set_header(separator)

    def on_add_file_container_button_clicked(self, button, data=None):
        self.add_file_container()

    def add_file_container(self):
        path = self.choose_container_path()
        if not path:
            return

        fd = os.open(path, os.O_RDWR)
        fd_list = Gio.UnixFDList()
        fd_list.append(fd)
        self.udisks_manager.call_loop_setup_sync(GLib.Variant('h', 0),  # fd index
                                                 GLib.Variant('a{sv}', {}),  # options
                                                 fd_list,  # the fd list
                                                 None)                       # cancellable

    def choose_container_path(self):
        dialog = Gtk.FileChooserDialog(_("Choose File Container"),
                                       self.window,
                                       Gtk.FileChooserAction.OPEN,
                                       (Gtk.STOCK_CANCEL, Gtk.ResponseType.CANCEL,
                                        Gtk.STOCK_OPEN, Gtk.ResponseType.ACCEPT))
        result = dialog.run()
        if result != Gtk.ResponseType.ACCEPT:
            dialog.destroy()
            return

        path = dialog.get_filename()
        dialog.destroy()
        return path

    def on_volume_changed(self, volume_monitor: Gio.VolumeMonitor, volume: Gio.Volume):
        logger.debug("in on_volume_changed")
        self.refresh_volume_lists()

    def on_volume_added(self, volume_monitor: Gio.VolumeMonitor, volume: Gio.Volume):
        logger.debug("in on_volume_added")
        self.refresh_volume_lists()

    def refresh_volume_lists(self):
        logger.debug("in refresh_volume_lists")
        self.container_manager.refresh_volume_list()
        self.device_manager.refresh_volume_list()


def parse_args():
    parser = argparse.ArgumentParser()
    parser.add_argument("--verbose", action="store_true")
    return parser.parse_args()


def init(args):
    if args.verbose:
        logging.basicConfig(level=logging.DEBUG)
    else:
        logging.basicConfig(level=logging.INFO)
    logger.debug("args: %r", args)


def main():
    args = parse_args()
    init(args)

    # Workaround for https://bugzilla.gnome.org/show_bug.cgi?id=622084
    signal.signal(signal.SIGINT, signal.SIG_DFL)

    Window()
    Gtk.main()


if __name__ == "__main__":
    main()
