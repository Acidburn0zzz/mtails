#!/usr/bin/env python3

import argparse
import logging
import signal
import os
from typing import List

import gi
gi.require_version('Gtk', '3.0')
gi.require_version('UDisks', '2.0')
gi.require_version('GUdev', '1.0')
from gi.repository import Gtk, Gio, UDisks, GUdev, GLib

from veracrypt_mounter import _
from veracrypt_mounter.config import APP_NAME, MAIN_UI_FILE
from veracrypt_mounter.volume_list import ContainerList, DeviceList
from veracrypt_mounter.volume import Volume
from veracrypt_mounter.exceptions import UdisksObjectNotFoundError


logger = logging.getLogger(__name__)


class VolumeManager(object):
    def __init__(self):
        self.udisks_client = UDisks.Client.new_sync()
        self.gio_volume_monitor = Gio.VolumeMonitor.get()
        self.gio_volume_monitor.connect("volume-changed", self.on_volume_changed)
        self.gio_volume_monitor.connect("volume-added", self.on_volume_added)
        self.gio_volume_monitor.connect("volume-removed", self.on_volume_removed)
        self.udev_client = GUdev.Client()

        self.builder = Gtk.Builder.new_from_file(MAIN_UI_FILE)
        self.builder.set_translation_domain(APP_NAME)
        self.builder.connect_signals(self)

        self.window = self.builder.get_object("window")
        self.window.set_title("VeraCrypt Mounter")
        self.window.connect("delete-event", Gtk.main_quit)

        self.container_list = ContainerList(self.window)
        self.device_list = DeviceList(self.window)

        containers_frame = self.builder.get_object("containers_frame")
        containers_frame.add(self.container_list.list_box)
        devices_frame = self.builder.get_object("devices_frame")
        devices_frame.add(self.device_list.list_box)

        self.add_tcrypt_volumes()

        logger.debug("showing window")
        self.window.show_all()

    def add_tcrypt_volumes(self):
        logger.debug("in add_tcrypt_volumes")
        for volume in self.get_tcrypt_volumes():
            self.add_volume(volume)

    def add_volume(self, volume: Volume):
        logger.info("Adding volume %s", volume.device_file)
        if volume.is_file_container:
            self.container_list.add(volume)
        else:
            self.device_list.add(volume)
        logger.info("Done adding volume")

    def remove_volume(self, volume: Volume):
        logger.info("Removing volume %s", volume.device_file)
        if volume.is_file_container:
            logger.debug("Removing from container list")
            self.container_list.remove(volume)
        else:
            self.device_list.remove(volume)

    def update_volume(self, volume: Volume):
        logger.info("Updating volume %s", volume.device_file)
        if volume.is_file_container:
            self.container_list.remove(volume)
            self.container_list.add(volume)
        else:
            self.device_list.remove(volume)
            self.device_list.add(volume)

    def get_tcrypt_volumes(self) -> List[Volume]:
        """Returns all connected TCRYPT volumes"""
        return [volume for volume in self.get_all_volumes() if volume.is_tcrypt]

    def get_all_volumes(self) -> List[Volume]:
        """Returns all connected volumes"""
        volumes = list()
        gio_volumes = self.gio_volume_monitor.get_volumes()

        for gio_volume in gio_volumes:
            device_file = gio_volume.get_identifier(Gio.VOLUME_IDENTIFIER_KIND_UNIX_DEVICE)
            if not device_file:
                continue

            logger.debug("volume: %s", device_file)

            try:
                volumes.append(Volume(self, gio_volume))
                logger.debug("is_file_container: %s", volumes[-1].is_file_container)
                logger.debug("is_tcrypt: %s", volumes[-1].is_tcrypt)
                logger.debug("is_unlocked: %s", volumes[-1].is_unlocked)
            except UdisksObjectNotFoundError as e:
                logger.exception(e)

        return volumes

    def on_add_file_container_button_clicked(self, button, data=None):
        path = self.choose_container_path()
        if not path:
            return

        try:
            fd = os.open(path, os.O_RDWR)
        except PermissionError:
            # Try opening read-only
            try:
                fd = os.open(path, os.O_RDONLY)
            except PermissionError as e:
                self.window.show_warning(title="Error opening file", body=str(e))
                return

        fd_list = Gio.UnixFDList()
        fd_list.append(fd)
        self.udisks_client.get_manager().call_loop_setup_sync(GLib.Variant('h', 0),       # fd index
                                                              GLib.Variant('a{sv}', {}),  # options
                                                              fd_list,                    # the fd list
                                                              None)                       # cancellable

    def choose_container_path(self):
        dialog = Gtk.FileChooserDialog(_("Choose File Container"),
                                       self.window,
                                       Gtk.FileChooserAction.OPEN,
                                       (Gtk.STOCK_CANCEL, Gtk.ResponseType.CANCEL,
                                        Gtk.STOCK_OPEN, Gtk.ResponseType.ACCEPT))
        result = dialog.run()
        if result != Gtk.ResponseType.ACCEPT:
            dialog.destroy()
            return

        path = dialog.get_filename()
        dialog.destroy()
        return path

    def on_volume_changed(self, volume_monitor: Gio.VolumeMonitor, gio_volume: Gio.Volume):
        logger.debug("in on_volume_changed. volume: %s",
                     gio_volume.get_identifier(Gio.VOLUME_IDENTIFIER_KIND_UNIX_DEVICE))
        try:
            volume = Volume(self, gio_volume)
            if volume.is_tcrypt:
                self.update_volume(volume)
        except UdisksObjectNotFoundError:
            volume = Volume(self, gio_volume, with_udisks=False)
            if volume in self.device_list:
                self.device_list.remove(volume)
            elif volume in self.container_list:
                self.container_list.remove(volume)

    def on_volume_added(self, volume_monitor: Gio.VolumeMonitor, gio_volume: Gio.Volume):
        logger.debug("in on_volume_added. volume: %s",
                     gio_volume.get_identifier(Gio.VOLUME_IDENTIFIER_KIND_UNIX_DEVICE))
        volume = Volume(self, gio_volume)
        if volume.is_tcrypt:
            self.add_volume(volume)

    def on_volume_removed(self, volume_monitor: Gio.VolumeMonitor, gio_volume: Gio.Volume):
        logger.debug("in on_volume_removed. volume: %s",
                     gio_volume.get_identifier(Gio.VOLUME_IDENTIFIER_KIND_UNIX_DEVICE))
        volume = Volume(self, gio_volume)
        if volume in self.device_list:
            self.remove_volume(volume)
        elif volume in self.container_list:
            self.container_list.remove(volume)

    def open_uri(self, uri: str):
        Gtk.show_uri_on_window(self.window, uri, Gtk.get_current_event_time())

    def show_warning(self, title: str, body: str):
        dialog = Gtk.MessageDialog(self.window,
                                   Gtk.DialogFlags.DESTROY_WITH_PARENT,
                                   Gtk.MessageType.WARNING,
                                   Gtk.ButtonsType.CLOSE,
                                   title)
        dialog.format_secondary_text(body)
        dialog.run()
        dialog.close()


def parse_args():
    parser = argparse.ArgumentParser()
    parser.add_argument("--verbose", action="store_true")
    return parser.parse_args()


def init(args):
    if args.verbose:
        logging.basicConfig(level=logging.DEBUG)
    else:
        logging.basicConfig(level=logging.INFO)
    logger.debug("args: %r", args)


def main():
    args = parse_args()
    init(args)

    # Workaround for https://bugzilla.gnome.org/show_bug.cgi?id=622084
    signal.signal(signal.SIGINT, signal.SIG_DFL)

    VolumeManager()
    Gtk.main()


if __name__ == "__main__":
    main()
