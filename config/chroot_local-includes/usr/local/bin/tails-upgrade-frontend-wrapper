#! /usr/bin/env python3
"""
Tails upgrade frontend wrapper.

Test with "python3 tails-upgrade-frontend-wrapper.py doctest".
The tests will start the upgrade process which could pop up a dialog box
so you probably want to use a tester that handles user interaction or
run the tests from the command line and answer prompts as needed.

goodcrypto.com converted from bash to python and added basic tests.

>>> # run script
>>> this_command = sh.Command(sys.argv[0])
>>> this_command()
<BLANKLINE>
"""

import os
import sys
import time
from gettext import gettext

import sh
import psutil

os.environ['PATH'] = '/usr/local/bin:/usr/bin:/bin'
os.environ['TEXTDOMAIN'] = 'tails'

CMD = os.path.basename(sys.argv[0])
TORDATE_DIR = '/run/tordate'
TORDATE_DONE_FILE = '{}/done'.format(TORDATE_DIR)
INOTIFY_TIMEOUT = 60
MIN_AVAILABLE_MEMORY = (300 * 1024 * 1024)  # In Bytes
RUN_AS_USER = 'tails-upgrade-frontend'

ERROR_MESSAGE = gettext('''\"<b>Not enough memory available to check for upgrades.</b>

Make sure this system satisfies the requirements for running Tails.
See file:///usr/share/doc/tails/website/doc/about/requirements.en.html

Try to restart Tails to check for upgrades again.

Or do a manual upgrade.
See https://tails.boum.org/doc/first_steps/upgrade#manual\"''')


def main(*args):
    time.sleep(30)
    check_free_memory(MIN_AVAILABLE_MEMORY)

    # Go to a place where everyone, especially Archive::Tar::Wrapper called by
    # tails-install-iuk, can chdir back after it has chdir'd elsewhere to do
    # its job.
    os.chdir('/')

    os.execv(
        "/bin/sh",
        (
            "/bin/sh", "-c",
            "xhost +SI:localuser:{user};"
            "sudo -u {user} /usr/bin/tails-upgrade-frontend {args};"
            "xhost -SI:localuser:{user}".format(user=RUN_AS_USER, args=" ".join(args))
        )
    )


def error(msg):
    """Show error and exit.

    >>> try:
    ...     error('testing')
    ...     fail()
    ... except SystemExit:
    ...     pass
    """
    cli_text = '{}: {} {}'.format(CMD, gettext('error:'), msg)
    dialog_text = '''<b><big>{}</big></b>\n\n{}'''.format(gettext('Error'), msg)
    print(cli_text, file=sys.stderr)

    sh.zenity('--error', '--title', "", '--text', dialog_text, _ok_code=[0,1,5])
    sys.exit(1)


def check_free_memory(min_available_memory):
    """Check for enough free memory.

    >>> check_free_memory(MIN_AVAILABLE_MEMORY)
    """

    available_memory = psutil.virtual_memory().available

    if available_memory < min_available_memory:
        print('Only {} Bytes memory available, while {} is needed'.format(
            available_memory, min_available_memory), file=sys.stderr)
        error(ERROR_MESSAGE)


if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'doctest':
        import doctest
        doctest.testmod()
    else:
        main(*sys.argv[1:])
