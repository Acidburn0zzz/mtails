#!/usr/bin/env python3

import argparse
import logging
import logging.handlers
import sys

import sh
from gi.repository import Gtk

from tails_server.gui.service import ServiceStatus
from tails_server.gui.gui import TailsServerGUI

sh.ErrorReturnCode.truncate_cap = 5000


def parse_args():
    parser = argparse.ArgumentParser()
    parser.add_argument("--log-file", "-l", default="/var/log/tails-server.log")
    parser.add_argument("--verbose", "-v", action="count")
    parser.add_argument("--no-client-auth", action="store_true",
                        help="Disables use of client authentication. This makes deanonymization "
                             "attacks possible, which have a much higher chance to succeed "
                             "against onion services running in Tails than against onion services "
                             "running with default Tor configuration. \n"
                             "So this option is currently considered insecure.\n"
                             "For more information, "
                             "see https://tails.boum.org/blueprint/tails_server.")
    return parser.parse_args()


def init(args):
    logger = logging.getLogger()
    logger.setLevel(0)
    logger.propagate = 0

    if not args.verbose:
        level = logging.INFO
    elif args.verbose == 1:
        level = logging.DEBUG
    else:
        level = 0
    if args.log_file:
        file_handler = logging.handlers.RotatingFileHandler(args.log_file, mode="w")
        file_handler.setLevel(logging.DEBUG)
        format_ = "%(asctime)s %(name)s[%(process)d]: %(levelname)s - %(message)s"
        file_handler.setFormatter(logging.Formatter(format_))
        logger.addHandler(file_handler)

    console_handler = logging.StreamHandler()
    console_handler.setLevel(level)
    format_ = "%(name)s:%(levelname)s: %(message)s"
    console_handler.setFormatter(logging.Formatter(format_))
    logger.addHandler(console_handler)

    logging.getLogger('stem').setLevel(level+5)
    logging.debug("args: %r", args)


def main():
    args = parse_args()
    init(args)

    if args.no_client_auth:
        from tails_server import service_template
        service_template.USE_CLIENT_AUTH = False

    try:
        ServiceStatus.register_signal()
        TailsServerGUI()
        Gtk.main()
    except:
        logging.exception('Got exception on main handler')
        sys.exit(1)

if __name__ == "__main__":
    main()
