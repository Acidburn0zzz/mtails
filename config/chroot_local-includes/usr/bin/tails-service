#!/usr/bin/env python3

import sys
import os
import logging
import contextlib

from tails_server import argument_parser
from tails_server import util
import tails_server.services
from tails_server.config import OPTIONS_FILE_NAME

service_names = tails_server.services.service_names
service_module_paths = tails_server.services.service_module_paths
service_modules_dict = tails_server.services.import_service_modules()
services = [module.service_class() for module in service_modules_dict.values()]


def list_services():
    for service in service_names:
        print("-", service)


def list_enabled():
    enabled_services = [service for service in services if service.is_running]
    for service in enabled_services:
        print("-", service.name)


@contextlib.contextmanager
def use_persistent_options_file_if_exists(service):
    persistent_options_file = os.path.join(service.persistence_dir, OPTIONS_FILE_NAME)
    if os.path.exists(persistent_options_file):
        service.options_file = persistent_options_file
    yield service
    service.options_file = os.path.join(service.state_dir, OPTIONS_FILE_NAME)


def restore_services():
    """Install packages and restore files of services which have the 'persistence' option set to
    True"""
    persistent_services = list()
    for service in services:
        with use_persistent_options_file_if_exists(service):
            if "persistence" in service.options_dict and service.options_dict["persistence"].value:
                persistent_services.append(service)

    for service in persistent_services:
        service.install()
        service.mount_persistent_files()


def autostart_services():
    """Start services with the autostart option set to True"""
    autostart_services = [
        service for service in services
        if "autostart" in service.options_dict and service.options_dict["autostart"].value
    ]
    for service in autostart_services:
        logging.info("Starting service %r", service.name)
        util.run_threaded(service.enable)


def init(args):
    if args.verbose:
        logging.basicConfig(level=logging.DEBUG)
    else:
        logging.basicConfig(level=logging.INFO)
    logging.debug("args: %r", args)


def exec_service(args):
    service_module_path = service_module_paths[args.SERVICE]
    del args.SERVICE
    os.execv(service_module_path, [service_module_path] + sys.argv[1:-1])


def main():
    args = argument_parser.WrapperParser().parse_args()
    init(args)

    if args.command == "list":
        list_services()
    elif args.command == "list-enabled":
        list_enabled()
    elif args.command == "restore":
        restore_services()
    elif args.command == "autostart":
        autostart_services()
    else:
        if os.geteuid() != 0:
            exit("This command requires root")
        exec_service(args)


if __name__ == "__main__":
    main()