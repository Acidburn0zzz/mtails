#!/bin/sh

set -e
set -u

echo "Building dkms modules"

. /usr/share/amnesia/build/variables

# the -dkms package must be installed *after* dkms to be properly registered
apt-get install --yes build-essential dkms

# Installing the headers triggers the building of the modules for that kernel
apt-get install --yes \
    "linux-headers-${KERNEL_VERSION}-amd64" \
    virtualbox-guest-dkms

MODULES_VERSION="$(dpkg-query -W -f='${Version}\n' virtualbox-guest-dkms \
		       | sed -E 's,-.*,,')"
dkms build \
    -a amd64 -k "${KERNEL_VERSION}-amd64" \
    -m virtualbox-guest -v "$MODULES_VERSION"
dkms install \
    -a amd64 -k "${KERNEL_VERSION}-amd64" \
    -m virtualbox-guest -v "$MODULES_VERSION"

# clean the build directory
# rm -r /var/lib/dkms/virtualbox-guest/

# Ensure the modules were actually built and installed: when
# dkms.conf for a DKMS module includes a BUILD_EXCLUSIVE directive
# which does not match our kernel version, the modules won't be built
# and then we should abort the build.
for modules_dir in /lib/modules/*/kernel/fs/aufs ; do
   if [ ! -f "${modules_dir}/aufs.ko" ]; then
       echo "Can not find aufs.ko module in '${modules_dir}" >&2
       exit 1
   fi
done
for module in vboxguest vboxsf vboxvideo ; do
   for modules_dir in /lib/modules/*/updates ; do
      if [ ! -f "${modules_dir}/${module}.ko" ]; then
	  echo "Can not find ${module} module in '${modules_dir}" >&2
	  exit 1
      fi
   done
done

# virtualbox-guest-dkms's postrm script deletes any previously
# built binary module; let's delete it before the package gets purged.
rm /var/lib/dpkg/info/virtualbox-guest-dkms.prerm

# Also copy the udev rules installed by virtualbox-guest-dkms to enable guest
# additions by default.
cp -a /lib/udev/rules.d/60-virtualbox-guest-dkms.rules /etc/udev/rules.d/
